
SVET_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d46  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000643  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e0  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058a  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000942  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	ec d0       	rcall	.+472    	; 0x214 <main>
  3c:	d7 c1       	rjmp	.+942    	; 0x3ec <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z7pinModehh>:
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	
	/* Return data from data register */
	return EEDR;
}
  40:	98 2f       	mov	r25, r24
  42:	90 7f       	andi	r25, 0xF0	; 240
  44:	8f 70       	andi	r24, 0x0F	; 15
  46:	90 3a       	cpi	r25, 0xA0	; 160
  48:	29 f0       	breq	.+10     	; 0x54 <_Z7pinModehh+0x14>
  4a:	90 3b       	cpi	r25, 0xB0	; 176
  4c:	29 f4       	brne	.+10     	; 0x58 <_Z7pinModehh+0x18>
  4e:	e7 e3       	ldi	r30, 0x37	; 55
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	02 c0       	rjmp	.+4      	; 0x58 <_Z7pinModehh+0x18>
  54:	ea e3       	ldi	r30, 0x3A	; 58
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	90 81       	ld	r25, Z
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	08 2e       	mov	r0, r24
  60:	02 c0       	rjmp	.+4      	; 0x66 <_Z7pinModehh+0x26>
  62:	22 0f       	add	r18, r18
  64:	33 1f       	adc	r19, r19
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <_Z7pinModehh+0x22>
  6a:	20 95       	com	r18
  6c:	29 23       	and	r18, r25
  6e:	62 30       	cpi	r22, 0x02	; 2
  70:	40 f4       	brcc	.+16     	; 0x82 <__DATA_REGION_LENGTH__+0x2>
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <_Z7pinModehh+0x3a>
  76:	66 0f       	add	r22, r22
  78:	77 1f       	adc	r23, r23
  7a:	8a 95       	dec	r24
  7c:	e2 f7       	brpl	.-8      	; 0x76 <_Z7pinModehh+0x36>
  7e:	26 2b       	or	r18, r22
  80:	20 83       	st	Z, r18
  82:	08 95       	ret

00000084 <_Z12digitalWritehh>:
  84:	98 2f       	mov	r25, r24
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	90 3a       	cpi	r25, 0xA0	; 160
  8c:	29 f0       	breq	.+10     	; 0x98 <_Z12digitalWritehh+0x14>
  8e:	90 3b       	cpi	r25, 0xB0	; 176
  90:	29 f4       	brne	.+10     	; 0x9c <_Z12digitalWritehh+0x18>
  92:	e8 e3       	ldi	r30, 0x38	; 56
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <_Z12digitalWritehh+0x18>
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 2e       	mov	r0, r24
  a4:	02 c0       	rjmp	.+4      	; 0xaa <_Z12digitalWritehh+0x26>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <_Z12digitalWritehh+0x22>
  ae:	20 95       	com	r18
  b0:	29 23       	and	r18, r25
  b2:	62 30       	cpi	r22, 0x02	; 2
  b4:	40 f4       	brcc	.+16     	; 0xc6 <_Z12digitalWritehh+0x42>
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <_Z12digitalWritehh+0x3a>
  ba:	66 0f       	add	r22, r22
  bc:	77 1f       	adc	r23, r23
  be:	8a 95       	dec	r24
  c0:	e2 f7       	brpl	.-8      	; 0xba <_Z12digitalWritehh+0x36>
  c2:	26 2b       	or	r18, r22
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <_Z15set_H_and_delayv>:
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z15set_H_and_delayv+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z15set_H_and_delayv+0xe>
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	88 bb       	out	0x18, r24	; 24
  dc:	08 95       	ret

000000de <_Z15set_L_and_delayv>:
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <__stack+0xd>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__stack+0x13>
  f2:	08 95       	ret

000000f4 <_Z14PWM_generationv>:
  f4:	83 e2       	ldi	r24, 0x23	; 35
  f6:	80 bf       	out	0x30, r24	; 48
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	83 bf       	out	0x33, r24	; 51
  fc:	12 be       	out	0x32, r1	; 50
  fe:	8f e7       	ldi	r24, 0x7F	; 127
 100:	8c bf       	out	0x3c, r24	; 60
 102:	08 95       	ret

00000104 <_Z9send_byteh>:

void send_byte(unsigned char b) {
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
	if (b & 0b10000000) {
 108:	88 23       	and	r24, r24
 10a:	14 f4       	brge	.+4      	; 0x110 <_Z9send_byteh+0xc>
		set_H_and_delay();
 10c:	dd df       	rcall	.-70     	; 0xc8 <_Z15set_H_and_delayv>
 10e:	01 c0       	rjmp	.+2      	; 0x112 <_Z9send_byteh+0xe>
	}
	else {
		set_L_and_delay();
 110:	e6 df       	rcall	.-52     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b01000000) {
 112:	c6 ff       	sbrs	r28, 6
 114:	02 c0       	rjmp	.+4      	; 0x11a <_Z9send_byteh+0x16>
		set_H_and_delay();
 116:	d8 df       	rcall	.-80     	; 0xc8 <_Z15set_H_and_delayv>
 118:	01 c0       	rjmp	.+2      	; 0x11c <_Z9send_byteh+0x18>
	}
	else {
		set_L_and_delay();
 11a:	e1 df       	rcall	.-62     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00100000) {
 11c:	c5 ff       	sbrs	r28, 5
 11e:	02 c0       	rjmp	.+4      	; 0x124 <_Z9send_byteh+0x20>
		set_H_and_delay();
 120:	d3 df       	rcall	.-90     	; 0xc8 <_Z15set_H_and_delayv>
 122:	01 c0       	rjmp	.+2      	; 0x126 <_Z9send_byteh+0x22>
	}
	else {
		set_L_and_delay();
 124:	dc df       	rcall	.-72     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00010000) {
 126:	c4 ff       	sbrs	r28, 4
 128:	02 c0       	rjmp	.+4      	; 0x12e <_Z9send_byteh+0x2a>
		set_H_and_delay();
 12a:	ce df       	rcall	.-100    	; 0xc8 <_Z15set_H_and_delayv>
 12c:	01 c0       	rjmp	.+2      	; 0x130 <_Z9send_byteh+0x2c>
	}
	else {
		set_L_and_delay();
 12e:	d7 df       	rcall	.-82     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00001000) {
 130:	c3 ff       	sbrs	r28, 3
 132:	02 c0       	rjmp	.+4      	; 0x138 <_Z9send_byteh+0x34>
		set_H_and_delay();
 134:	c9 df       	rcall	.-110    	; 0xc8 <_Z15set_H_and_delayv>
 136:	01 c0       	rjmp	.+2      	; 0x13a <_Z9send_byteh+0x36>
	}
	else {
		set_L_and_delay();
 138:	d2 df       	rcall	.-92     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000100) {
 13a:	c2 ff       	sbrs	r28, 2
 13c:	02 c0       	rjmp	.+4      	; 0x142 <_Z9send_byteh+0x3e>
		set_H_and_delay();
 13e:	c4 df       	rcall	.-120    	; 0xc8 <_Z15set_H_and_delayv>
 140:	01 c0       	rjmp	.+2      	; 0x144 <_Z9send_byteh+0x40>
	}
	else {
		set_L_and_delay();
 142:	cd df       	rcall	.-102    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000010) {
 144:	c1 ff       	sbrs	r28, 1
 146:	02 c0       	rjmp	.+4      	; 0x14c <_Z9send_byteh+0x48>
		set_H_and_delay();
 148:	bf df       	rcall	.-130    	; 0xc8 <_Z15set_H_and_delayv>
 14a:	01 c0       	rjmp	.+2      	; 0x14e <_Z9send_byteh+0x4a>
	}
	else {
		set_L_and_delay();
 14c:	c8 df       	rcall	.-112    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000001) {
 14e:	c0 ff       	sbrs	r28, 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <_Z9send_byteh+0x52>
		set_H_and_delay();
 152:	ba df       	rcall	.-140    	; 0xc8 <_Z15set_H_and_delayv>
 154:	01 c0       	rjmp	.+2      	; 0x158 <_Z9send_byteh+0x54>
	}
	else {
		set_L_and_delay();
 156:	c3 df       	rcall	.-122    	; 0xde <_Z15set_L_and_delayv>
	}
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_Z8send_GRBhhh>:

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	08 2f       	mov	r16, r24
 166:	16 2f       	mov	r17, r22
 168:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < 144; i++){
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	c0 39       	cpi	r28, 0x90	; 144
 16e:	40 f4       	brcc	.+16     	; 0x180 <_Z8send_GRBhhh+0x24>
		send_byte (g);
 170:	80 2f       	mov	r24, r16
 172:	c8 df       	rcall	.-112    	; 0x104 <_Z9send_byteh>
		send_byte (r);
 174:	81 2f       	mov	r24, r17
 176:	c6 df       	rcall	.-116    	; 0x104 <_Z9send_byteh>
		send_byte (b);
 178:	8d 2f       	mov	r24, r29
 17a:	c4 df       	rcall	.-120    	; 0x104 <_Z9send_byteh>
		set_L_and_delay();
	}
}

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
	for (uint8_t i = 0; i < 144; i++){
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <_Z8send_GRBhhh+0x10>
		send_byte (g);
		send_byte (r);
		send_byte (b);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <_Z8ADC_initv>:

void ADC_init(){ //ADC on A2
	uint16_t current_ADC_level = 0;

	uint8_t adc_lvl = 0;
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000111; //CLK/128 (~?kHz)
 18e:	87 e8       	ldi	r24, 0x87	; 135
 190:	86 b9       	out	0x06, r24	; 6
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	83 b9       	out	0x03, r24	; 3
	ADCSRA |= (1 << ADSC);
 196:	86 b1       	in	r24, 0x06	; 6
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	86 b9       	out	0x06, r24	; 6

	for (uint8_t i = 0; i < 100; i++)
 19c:	90 e0       	ldi	r25, 0x00	; 0
}



void ADC_init(){ //ADC on A2
	uint16_t current_ADC_level = 0;
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
	ADCSRA = 0b10000111; //CLK/128 (~?kHz)
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
	ADCSRA |= (1 << ADSC);

	for (uint8_t i = 0; i < 100; i++)
 1a2:	94 36       	cpi	r25, 0x64	; 100
 1a4:	38 f4       	brcc	.+14     	; 0x1b4 <_Z8ADC_initv+0x2a>
	{
		while (ADCSRA & (1 << ADSC) );
 1a6:	36 99       	sbic	0x06, 6	; 6
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <_Z8ADC_initv+0x1c>
		adc_lvl = ADCH;
 1aa:	85 b1       	in	r24, 0x05	; 5
		current_ADC_level += (uint16_t)(adc_lvl);
 1ac:	28 0f       	add	r18, r24
 1ae:	31 1d       	adc	r19, r1
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
	ADCSRA = 0b10000111; //CLK/128 (~?kHz)
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
	ADCSRA |= (1 << ADSC);

	for (uint8_t i = 0; i < 100; i++)
 1b0:	9f 5f       	subi	r25, 0xFF	; 255
 1b2:	f7 cf       	rjmp	.-18     	; 0x1a2 <_Z8ADC_initv+0x18>
		while (ADCSRA & (1 << ADSC) );
		adc_lvl = ADCH;
		current_ADC_level += (uint16_t)(adc_lvl);
	}
	
	current_ADC_level = current_ADC_level / 100u;
 1b4:	e4 e6       	ldi	r30, 0x64	; 100
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	c9 01       	movw	r24, r18
 1ba:	bf 01       	movw	r22, r30
 1bc:	03 d1       	rcall	.+518    	; 0x3c4 <__udivmodhi4>
	current_ADC_level = current_ADC_level * 95u;
 1be:	cb 01       	movw	r24, r22
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	86 0f       	add	r24, r22
 1c6:	97 1f       	adc	r25, r23
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	82 95       	swap	r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	98 27       	eor	r25, r24
 1d4:	80 7f       	andi	r24, 0xF0	; 240
 1d6:	98 27       	eor	r25, r24
 1d8:	86 1b       	sub	r24, r22
 1da:	97 0b       	sbc	r25, r23
	current_ADC_level = current_ADC_level / 100u;
 1dc:	bf 01       	movw	r22, r30
 1de:	f2 d0       	rcall	.+484    	; 0x3c4 <__udivmodhi4>
	::base_ADC_level = (uint8_t)(current_ADC_level);
 1e0:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
 1e4:	08 95       	ret

000001e6 <_Z17PWM_generation_16v>:
	//::base_ADC_level = 215;
}

void PWM_generation_16() {	   //16-bit
	TCCR1A = 0b00100001; //COM0B1 = 0, COM0B0 = 1; WGM01 = 0, WGM00 = 1; (phase-corrent PWM on A7)
 1e6:	81 e2       	ldi	r24, 0x21	; 33
 1e8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00000001; // CLK (need more info on frequency)
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	8e bd       	out	0x2e, r24	; 46
	//TCCR1C = 0b01000000; // CLK (need more info on frequency)
	TCNT1H=0; //counter starting value
 1ee:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0; //counter starting value
 1f0:	1c bc       	out	0x2c, r1	; 44
	OCR1BH=ADCH; //PWM duty
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	89 bd       	out	0x29, r24	; 41
	OCR1BL=ADCH; //PWM duty
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	88 bd       	out	0x28, r24	; 40
 1fa:	08 95       	ret

000001fc <_Z17get_button_statusv>:
}

bool get_button_status(){
	ADCSRA |= (1 << ADSC);
 1fc:	86 b1       	in	r24, 0x06	; 6
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC) );
 202:	36 99       	sbic	0x06, 6	; 6
 204:	fe cf       	rjmp	.-4      	; 0x202 <_Z17get_button_statusv+0x6>
	if(ADCH <= 202){
 206:	85 b1       	in	r24, 0x05	; 5
 208:	8b 3c       	cpi	r24, 0xCB	; 203
 20a:	10 f4       	brcc	.+4      	; 0x210 <_Z17get_button_statusv+0x14>
		return true;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
	}
	else{
		return false;
 210:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 212:	08 95       	ret

00000214 <main>:


main()
{
	pinMode(DIN, OUTPUT);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	82 eb       	ldi	r24, 0xB2	; 178
 218:	13 df       	rcall	.-474    	; 0x40 <_Z7pinModehh>
	pinMode(IMP, OUTPUT);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	87 ea       	ldi	r24, 0xA7	; 167
 21e:	10 df       	rcall	.-480    	; 0x40 <_Z7pinModehh>
	pinMode(ADC_1, OUTPUT);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	85 ea       	ldi	r24, 0xA5	; 165
 224:	0d df       	rcall	.-486    	; 0x40 <_Z7pinModehh>
	pinMode(BTN, INPUT);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	83 ea       	ldi	r24, 0xA3	; 163
 22a:	0a df       	rcall	.-492    	; 0x40 <_Z7pinModehh>
	digitalWrite(BTN, HIGH);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	83 ea       	ldi	r24, 0xA3	; 163
 230:	29 df       	rcall	.-430    	; 0x84 <_Z12digitalWritehh>
	ADC_init();
 232:	ab df       	rcall	.-170    	; 0x18a <_Z8ADC_initv>
	PWM_generation();
 234:	5f df       	rcall	.-322    	; 0xf4 <_Z14PWM_generationv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e4       	ldi	r24, 0x4F	; 79
 238:	93 ec       	ldi	r25, 0xC3	; 195
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x26>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x2c>
 240:	00 00       	nop
	//uint8_t stage = EEPROM_read(3);
	//uint8_t brt = EEPROM_read(4);

	int timebase = 0;
	_delay_ms(10);
	send_GRB(255,255,255);
 242:	4f ef       	ldi	r20, 0xFF	; 255
 244:	6f ef       	ldi	r22, 0xFF	; 255
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	89 df       	rcall	.-238    	; 0x15c <_Z8send_GRBhhh>
	//uint8_t cur_r = EEPROM_read(1);
	//uint8_t cur_b = EEPROM_read(2);
	//uint8_t stage = EEPROM_read(3);
	//uint8_t brt = EEPROM_read(4);

	int timebase = 0;
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d0 e0       	ldi	r29, 0x00	; 0
	ADC_init();
	PWM_generation();

	uint8_t brt = 0,stage = 0, cur_g = 0, cur_r = 0, cur_b = 0;
	int8_t dir = 1;
	bool btn_status = false, btn_press = false;
 24e:	f1 2c       	mov	r15, r1
 250:	d1 2c       	mov	r13, r1
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();

	uint8_t brt = 0,stage = 0, cur_g = 0, cur_r = 0, cur_b = 0;
	int8_t dir = 1;
 252:	ee 24       	eor	r14, r14
 254:	e3 94       	inc	r14
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();

	uint8_t brt = 0,stage = 0, cur_g = 0, cur_r = 0, cur_b = 0;
 256:	a1 2c       	mov	r10, r1
 258:	b1 2c       	mov	r11, r1
 25a:	c1 2c       	mov	r12, r1
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	10 e0       	ldi	r17, 0x00	; 0

	int timebase = 0;
	_delay_ms(10);
	send_GRB(255,255,255);
	while (1)
	{		PWM_generation_16();
 260:	c2 df       	rcall	.-124    	; 0x1e6 <_Z17PWM_generation_16v>
		
		if (get_button_status())	{
 262:	cc df       	rcall	.-104    	; 0x1fc <_Z17get_button_statusv>
 264:	88 23       	and	r24, r24
 266:	09 f4       	brne	.+2      	; 0x26a <main+0x56>
 268:	a3 c0       	rjmp	.+326    	; 0x3b0 <main+0x19c>
			
			timebase++;
 26a:	21 96       	adiw	r28, 0x01	; 1
			//digitalWrite(IMP, HIGH);
			if (timebase >= 50 && timebase < 1000 && btn_press == false){
 26c:	ce 01       	movw	r24, r28
 26e:	c2 97       	sbiw	r24, 0x32	; 50
 270:	86 3b       	cpi	r24, 0xB6	; 182
 272:	93 40       	sbci	r25, 0x03	; 3
 274:	40 f5       	brcc	.+80     	; 0x2c6 <main+0xb2>
 276:	f1 10       	cpse	r15, r1
 278:	26 c0       	rjmp	.+76     	; 0x2c6 <main+0xb2>
				
				if (btn_status == false){
 27a:	d1 10       	cpse	r13, r1
 27c:	12 c0       	rjmp	.+36     	; 0x2a2 <main+0x8e>
					
					send_GRB(cur_g, cur_r, cur_b);
 27e:	4a 2d       	mov	r20, r10
 280:	6b 2d       	mov	r22, r11
 282:	8c 2d       	mov	r24, r12
 284:	6b df       	rcall	.-298    	; 0x15c <_Z8send_GRBhhh>
					btn_status = !btn_status;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	d8 26       	eor	r13, r24
 28a:	8f e7       	ldi	r24, 0x7F	; 127
 28c:	9a e1       	ldi	r25, 0x1A	; 26
 28e:	26 e0       	ldi	r18, 0x06	; 6
 290:	81 50       	subi	r24, 0x01	; 1
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x7c>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x86>
 29a:	00 00       	nop
					btn_press = true;
 29c:	ff 24       	eor	r15, r15
 29e:	f3 94       	inc	r15
 2a0:	8a c0       	rjmp	.+276    	; 0x3b6 <main+0x1a2>
					_delay_ms(100);
				}
				else {
					send_GRB(0,0,0);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	59 df       	rcall	.-334    	; 0x15c <_Z8send_GRBhhh>
					//EEPROM_write(cur_g, 0);
					//EEPROM_write(cur_r, 1);
					//EEPROM_write(cur_b, 2);
					//EEPROM_write(stage, 3);
					//EEPROM_write(brt, 4);
					btn_status = !btn_status;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	d8 26       	eor	r13, r24
 2ae:	8f e7       	ldi	r24, 0x7F	; 127
 2b0:	9a e1       	ldi	r25, 0x1A	; 26
 2b2:	26 e0       	ldi	r18, 0x06	; 6
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	20 40       	sbci	r18, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0xa0>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0xaa>
 2be:	00 00       	nop
					btn_press = true;
 2c0:	ff 24       	eor	r15, r15
 2c2:	f3 94       	inc	r15
 2c4:	78 c0       	rjmp	.+240    	; 0x3b6 <main+0x1a2>
					_delay_ms(100);
				}
			}
			else if (timebase >= 1000)
 2c6:	c8 3e       	cpi	r28, 0xE8	; 232
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	d8 07       	cpc	r29, r24
 2cc:	0c f4       	brge	.+2      	; 0x2d0 <main+0xbc>
 2ce:	73 c0       	rjmp	.+230    	; 0x3b6 <main+0x1a2>
			{
				
				
				brt += dir;
 2d0:	1e 0d       	add	r17, r14
				if (brt >= 255) {
 2d2:	1f 3f       	cpi	r17, 0xFF	; 255
 2d4:	19 f0       	breq	.+6      	; 0x2dc <main+0xc8>
					
					dir = -1;
				}
				else if (brt == 0) {
 2d6:	11 23       	and	r17, r17
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <main+0xce>
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <main+0xd2>
				
				
				brt += dir;
				if (brt >= 255) {
					
					dir = -1;
 2dc:	ee 24       	eor	r14, r14
 2de:	ea 94       	dec	r14
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <main+0xd2>
				}
				else if (brt == 0) {
					
					dir = 1;
 2e2:	ee 24       	eor	r14, r14
 2e4:	e3 94       	inc	r14
				}

				// time the animation
				if (timebase > 1509) {
 2e6:	c6 3e       	cpi	r28, 0xE6	; 230
 2e8:	95 e0       	ldi	r25, 0x05	; 5
 2ea:	d9 07       	cpc	r29, r25
 2ec:	7c f0       	brlt	.+30     	; 0x30c <main+0xf8>
					
					timebase = 1000;
					stage += 1;
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
					brt = 0;
					dir = 1;
					if (stage >= 8) {
 2f0:	08 30       	cpi	r16, 0x08	; 8
 2f2:	30 f4       	brcc	.+12     	; 0x300 <main+0xec>
				}

				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
 2f4:	c8 ee       	ldi	r28, 0xE8	; 232
 2f6:	d3 e0       	ldi	r29, 0x03	; 3
					stage += 1;
					brt = 0;
					dir = 1;
 2f8:	ee 24       	eor	r14, r14
 2fa:	e3 94       	inc	r14
				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
					stage += 1;
					brt = 0;
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <main+0xf8>
				}

				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
 300:	c8 ee       	ldi	r28, 0xE8	; 232
 302:	d3 e0       	ldi	r29, 0x03	; 3
					stage += 1;
					brt = 0;
					dir = 1;
 304:	ee 24       	eor	r14, r14
 306:	e3 94       	inc	r14
					if (stage >= 8) {
						stage = 0;
 308:	00 e0       	ldi	r16, 0x00	; 0
				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
					stage += 1;
					brt = 0;
 30a:	10 e0       	ldi	r17, 0x00	; 0
						stage = 0;
					}
				}
				//send_GRB(0,0,255-ADCH);

				if (stage == 0) {
 30c:	01 11       	cpse	r16, r1
 30e:	08 c0       	rjmp	.+16     	; 0x320 <main+0x10c>
					send_GRB(0,brt,0);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	61 2f       	mov	r22, r17
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	22 df       	rcall	.-444    	; 0x15c <_Z8send_GRBhhh>
					cur_g = 0;
					cur_r = brt;
 318:	b1 2e       	mov	r11, r17
					cur_b = 0;
 31a:	a1 2c       	mov	r10, r1
				}
				//send_GRB(0,0,255-ADCH);

				if (stage == 0) {
					send_GRB(0,brt,0);
					cur_g = 0;
 31c:	c1 2c       	mov	r12, r1
 31e:	4b c0       	rjmp	.+150    	; 0x3b6 <main+0x1a2>
					cur_r = brt;
					cur_b = 0;
					} else if (stage == 1) {
 320:	01 30       	cpi	r16, 0x01	; 1
 322:	49 f4       	brne	.+18     	; 0x336 <main+0x122>
					send_GRB(brt / 2,brt,0);
 324:	c1 2e       	mov	r12, r17
 326:	c6 94       	lsr	r12
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	61 2f       	mov	r22, r17
 32c:	8c 2d       	mov	r24, r12
 32e:	16 df       	rcall	.-468    	; 0x15c <_Z8send_GRBhhh>
					cur_g = brt / 2;
					cur_r = brt;
 330:	b1 2e       	mov	r11, r17
					cur_b = 0;
 332:	a1 2c       	mov	r10, r1
 334:	40 c0       	rjmp	.+128    	; 0x3b6 <main+0x1a2>
					} else if (stage == 2) {
 336:	02 30       	cpi	r16, 0x02	; 2
 338:	41 f4       	brne	.+16     	; 0x34a <main+0x136>
					send_GRB(brt,brt,0);
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	61 2f       	mov	r22, r17
 33e:	81 2f       	mov	r24, r17
 340:	0d df       	rcall	.-486    	; 0x15c <_Z8send_GRBhhh>
					cur_g = brt;
					cur_r = brt;
 342:	b1 2e       	mov	r11, r17
					cur_g = brt / 2;
					cur_r = brt;
					cur_b = 0;
					} else if (stage == 2) {
					send_GRB(brt,brt,0);
					cur_g = brt;
 344:	c1 2e       	mov	r12, r17
					cur_r = brt;
					cur_b = 0;
 346:	a1 2c       	mov	r10, r1
 348:	36 c0       	rjmp	.+108    	; 0x3b6 <main+0x1a2>
					} else if (stage == 3) {
 34a:	03 30       	cpi	r16, 0x03	; 3
 34c:	41 f4       	brne	.+16     	; 0x35e <main+0x14a>
					send_GRB(brt,0,0);
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	81 2f       	mov	r24, r17
 354:	03 df       	rcall	.-506    	; 0x15c <_Z8send_GRBhhh>
					cur_g = brt;
 356:	c1 2e       	mov	r12, r17
					cur_r = 0;
					cur_b = 0;
 358:	a1 2c       	mov	r10, r1
					cur_r = brt;
					cur_b = 0;
					} else if (stage == 3) {
					send_GRB(brt,0,0);
					cur_g = brt;
					cur_r = 0;
 35a:	b1 2c       	mov	r11, r1
 35c:	2c c0       	rjmp	.+88     	; 0x3b6 <main+0x1a2>
					cur_b = 0;
					} else if (stage == 4) {
 35e:	04 30       	cpi	r16, 0x04	; 4
 360:	41 f4       	brne	.+16     	; 0x372 <main+0x15e>
					send_GRB(brt,0, brt);
 362:	41 2f       	mov	r20, r17
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	81 2f       	mov	r24, r17
 368:	f9 de       	rcall	.-526    	; 0x15c <_Z8send_GRBhhh>
					cur_g = brt;
					cur_r = 0;
					cur_b = brt;
 36a:	a1 2e       	mov	r10, r17
					cur_g = brt;
					cur_r = 0;
					cur_b = 0;
					} else if (stage == 4) {
					send_GRB(brt,0, brt);
					cur_g = brt;
 36c:	c1 2e       	mov	r12, r17
					cur_r = 0;
 36e:	b1 2c       	mov	r11, r1
 370:	22 c0       	rjmp	.+68     	; 0x3b6 <main+0x1a2>
					cur_b = brt;
					} else if (stage == 5) {
 372:	05 30       	cpi	r16, 0x05	; 5
 374:	41 f4       	brne	.+16     	; 0x386 <main+0x172>
					send_GRB(0, 0, brt);
 376:	41 2f       	mov	r20, r17
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	ef de       	rcall	.-546    	; 0x15c <_Z8send_GRBhhh>
					cur_g = 0;
					cur_r = 0;
					cur_b = brt;
 37e:	a1 2e       	mov	r10, r17
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 5) {
					send_GRB(0, 0, brt);
					cur_g = 0;
					cur_r = 0;
 380:	b1 2c       	mov	r11, r1
					cur_g = brt;
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 5) {
					send_GRB(0, 0, brt);
					cur_g = 0;
 382:	c1 2c       	mov	r12, r1
 384:	18 c0       	rjmp	.+48     	; 0x3b6 <main+0x1a2>
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 6) {
 386:	06 30       	cpi	r16, 0x06	; 6
 388:	49 f4       	brne	.+18     	; 0x39c <main+0x188>
					send_GRB(0, brt / 2, brt);
 38a:	b1 2e       	mov	r11, r17
 38c:	b6 94       	lsr	r11
 38e:	41 2f       	mov	r20, r17
 390:	6b 2d       	mov	r22, r11
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	e3 de       	rcall	.-570    	; 0x15c <_Z8send_GRBhhh>
					cur_g = 0;
					cur_r = brt / 2;
					cur_b = brt;
 396:	a1 2e       	mov	r10, r17
					cur_g = 0;
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 6) {
					send_GRB(0, brt / 2, brt);
					cur_g = 0;
 398:	c1 2c       	mov	r12, r1
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <main+0x1a2>
					cur_r = brt / 2;
					cur_b = brt;
					} else if (stage == 7) {
 39c:	07 30       	cpi	r16, 0x07	; 7
 39e:	59 f4       	brne	.+22     	; 0x3b6 <main+0x1a2>
					send_GRB(brt, brt, brt);
 3a0:	41 2f       	mov	r20, r17
 3a2:	61 2f       	mov	r22, r17
 3a4:	81 2f       	mov	r24, r17
 3a6:	da de       	rcall	.-588    	; 0x15c <_Z8send_GRBhhh>
					cur_g = brt;
					cur_r = brt;
					cur_b = brt;
 3a8:	a1 2e       	mov	r10, r17
					cur_r = brt / 2;
					cur_b = brt;
					} else if (stage == 7) {
					send_GRB(brt, brt, brt);
					cur_g = brt;
					cur_r = brt;
 3aa:	b1 2e       	mov	r11, r17
					cur_g = 0;
					cur_r = brt / 2;
					cur_b = brt;
					} else if (stage == 7) {
					send_GRB(brt, brt, brt);
					cur_g = brt;
 3ac:	c1 2e       	mov	r12, r17
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <main+0x1a2>
			}
		}
		else {
			//btn_status = false;
			btn_press = false;
			timebase = 0;
 3b0:	c0 e0       	ldi	r28, 0x00	; 0
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		}
		else {
			//btn_status = false;
			btn_press = false;
 3b4:	f1 2c       	mov	r15, r1
 3b6:	87 e8       	ldi	r24, 0x87	; 135
 3b8:	93 e1       	ldi	r25, 0x13	; 19
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x1a6>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x1ac>
 3c0:	00 00       	nop
 3c2:	4e cf       	rjmp	.-356    	; 0x260 <main+0x4c>

000003c4 <__udivmodhi4>:
 3c4:	aa 1b       	sub	r26, r26
 3c6:	bb 1b       	sub	r27, r27
 3c8:	51 e1       	ldi	r21, 0x11	; 17
 3ca:	07 c0       	rjmp	.+14     	; 0x3da <__udivmodhi4_ep>

000003cc <__udivmodhi4_loop>:
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	a6 17       	cp	r26, r22
 3d2:	b7 07       	cpc	r27, r23
 3d4:	10 f0       	brcs	.+4      	; 0x3da <__udivmodhi4_ep>
 3d6:	a6 1b       	sub	r26, r22
 3d8:	b7 0b       	sbc	r27, r23

000003da <__udivmodhi4_ep>:
 3da:	88 1f       	adc	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	5a 95       	dec	r21
 3e0:	a9 f7       	brne	.-22     	; 0x3cc <__udivmodhi4_loop>
 3e2:	80 95       	com	r24
 3e4:	90 95       	com	r25
 3e6:	bc 01       	movw	r22, r24
 3e8:	cd 01       	movw	r24, r26
 3ea:	08 95       	ret

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
