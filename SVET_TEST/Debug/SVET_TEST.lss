
SVET_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d12  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000643  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070a  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000532  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000873  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	b4 d0       	rcall	.+360    	; 0x194 <main>
  2c:	7b c1       	rjmp	.+758    	; 0x324 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <_Z7pinModehh>:
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	
	/* Return data from data register */
	return EEDR;
}
  30:	98 2f       	mov	r25, r24
  32:	90 7f       	andi	r25, 0xF0	; 240
  34:	8f 70       	andi	r24, 0x0F	; 15
  36:	90 3a       	cpi	r25, 0xA0	; 160
  38:	29 f0       	breq	.+10     	; 0x44 <__SREG__+0x5>
  3a:	90 3b       	cpi	r25, 0xB0	; 176
  3c:	29 f4       	brne	.+10     	; 0x48 <__SREG__+0x9>
  3e:	e7 e3       	ldi	r30, 0x37	; 55
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	ea e3       	ldi	r30, 0x3A	; 58
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	90 81       	ld	r25, Z
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	08 2e       	mov	r0, r24
  50:	02 c0       	rjmp	.+4      	; 0x56 <__SREG__+0x17>
  52:	22 0f       	add	r18, r18
  54:	33 1f       	adc	r19, r19
  56:	0a 94       	dec	r0
  58:	e2 f7       	brpl	.-8      	; 0x52 <__SREG__+0x13>
  5a:	20 95       	com	r18
  5c:	29 23       	and	r18, r25
  5e:	62 30       	cpi	r22, 0x02	; 2
  60:	40 f4       	brcc	.+16     	; 0x72 <__SREG__+0x33>
  62:	70 e0       	ldi	r23, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <__SREG__+0x2b>
  66:	66 0f       	add	r22, r22
  68:	77 1f       	adc	r23, r23
  6a:	8a 95       	dec	r24
  6c:	e2 f7       	brpl	.-8      	; 0x66 <__SREG__+0x27>
  6e:	26 2b       	or	r18, r22
  70:	20 83       	st	Z, r18
  72:	08 95       	ret

00000074 <_Z12digitalWritehh>:
  74:	98 2f       	mov	r25, r24
  76:	90 7f       	andi	r25, 0xF0	; 240
  78:	8f 70       	andi	r24, 0x0F	; 15
  7a:	90 3a       	cpi	r25, 0xA0	; 160
  7c:	29 f0       	breq	.+10     	; 0x88 <__DATA_REGION_LENGTH__+0x8>
  7e:	90 3b       	cpi	r25, 0xB0	; 176
  80:	29 f4       	brne	.+10     	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  82:	e8 e3       	ldi	r30, 0x38	; 56
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  88:	eb e3       	ldi	r30, 0x3B	; 59
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	90 81       	ld	r25, Z
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	08 2e       	mov	r0, r24
  94:	02 c0       	rjmp	.+4      	; 0x9a <__DATA_REGION_LENGTH__+0x1a>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <__DATA_REGION_LENGTH__+0x16>
  9e:	20 95       	com	r18
  a0:	29 23       	and	r18, r25
  a2:	62 30       	cpi	r22, 0x02	; 2
  a4:	40 f4       	brcc	.+16     	; 0xb6 <__DATA_REGION_LENGTH__+0x36>
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <__DATA_REGION_LENGTH__+0x2e>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <__DATA_REGION_LENGTH__+0x2a>
  b2:	26 2b       	or	r18, r22
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <_Z15set_H_and_delayv>:
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <_Z15set_H_and_delayv+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_Z15set_H_and_delayv+0xc>
  c4:	18 ba       	out	0x18, r1	; 24
  c6:	08 95       	ret

000000c8 <_Z15set_L_and_delayv>:
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	18 ba       	out	0x18, r1	; 24
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z15set_L_and_delayv+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z15set_L_and_delayv+0xe>
  d6:	08 95       	ret

000000d8 <_Z14PWM_generationv>:
  d8:	83 e2       	ldi	r24, 0x23	; 35
  da:	80 bf       	out	0x30, r24	; 48
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	83 bf       	out	0x33, r24	; 51
  e0:	12 be       	out	0x32, r1	; 50
  e2:	8f e7       	ldi	r24, 0x7F	; 127
  e4:	8c bf       	out	0x3c, r24	; 60
  e6:	08 95       	ret

000000e8 <_Z8ADC_initv>:
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	87 b9       	out	0x07, r24	; 7
  ec:	87 e8       	ldi	r24, 0x87	; 135
  ee:	86 b9       	out	0x06, r24	; 6
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	83 b9       	out	0x03, r24	; 3
  f4:	08 95       	ret

000000f6 <_Z9send_byteh>:

void send_byte(unsigned char b) {
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24
	if (b & 0b10000000) {
  fa:	88 23       	and	r24, r24
  fc:	14 f4       	brge	.+4      	; 0x102 <_Z9send_byteh+0xc>
		set_H_and_delay();
  fe:	dc df       	rcall	.-72     	; 0xb8 <_Z15set_H_and_delayv>
 100:	01 c0       	rjmp	.+2      	; 0x104 <_Z9send_byteh+0xe>
	}
	else {
		set_L_and_delay();
 102:	e2 df       	rcall	.-60     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b01000000) {
 104:	c6 ff       	sbrs	r28, 6
 106:	02 c0       	rjmp	.+4      	; 0x10c <_Z9send_byteh+0x16>
		set_H_and_delay();
 108:	d7 df       	rcall	.-82     	; 0xb8 <_Z15set_H_and_delayv>
 10a:	01 c0       	rjmp	.+2      	; 0x10e <_Z9send_byteh+0x18>
	}
	else {
		set_L_and_delay();
 10c:	dd df       	rcall	.-70     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00100000) {
 10e:	c5 ff       	sbrs	r28, 5
 110:	02 c0       	rjmp	.+4      	; 0x116 <_Z9send_byteh+0x20>
		set_H_and_delay();
 112:	d2 df       	rcall	.-92     	; 0xb8 <_Z15set_H_and_delayv>
 114:	01 c0       	rjmp	.+2      	; 0x118 <_Z9send_byteh+0x22>
	}
	else {
		set_L_and_delay();
 116:	d8 df       	rcall	.-80     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00010000) {
 118:	c4 ff       	sbrs	r28, 4
 11a:	02 c0       	rjmp	.+4      	; 0x120 <_Z9send_byteh+0x2a>
		set_H_and_delay();
 11c:	cd df       	rcall	.-102    	; 0xb8 <_Z15set_H_and_delayv>
 11e:	01 c0       	rjmp	.+2      	; 0x122 <_Z9send_byteh+0x2c>
	}
	else {
		set_L_and_delay();
 120:	d3 df       	rcall	.-90     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00001000) {
 122:	c3 ff       	sbrs	r28, 3
 124:	02 c0       	rjmp	.+4      	; 0x12a <_Z9send_byteh+0x34>
		set_H_and_delay();
 126:	c8 df       	rcall	.-112    	; 0xb8 <_Z15set_H_and_delayv>
 128:	01 c0       	rjmp	.+2      	; 0x12c <_Z9send_byteh+0x36>
	}
	else {
		set_L_and_delay();
 12a:	ce df       	rcall	.-100    	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00000100) {
 12c:	c2 ff       	sbrs	r28, 2
 12e:	02 c0       	rjmp	.+4      	; 0x134 <_Z9send_byteh+0x3e>
		set_H_and_delay();
 130:	c3 df       	rcall	.-122    	; 0xb8 <_Z15set_H_and_delayv>
 132:	01 c0       	rjmp	.+2      	; 0x136 <_Z9send_byteh+0x40>
	}
	else {
		set_L_and_delay();
 134:	c9 df       	rcall	.-110    	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00000010) {
 136:	c1 ff       	sbrs	r28, 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <_Z9send_byteh+0x48>
		set_H_and_delay();
 13a:	be df       	rcall	.-132    	; 0xb8 <_Z15set_H_and_delayv>
 13c:	01 c0       	rjmp	.+2      	; 0x140 <_Z9send_byteh+0x4a>
	}
	else {
		set_L_and_delay();
 13e:	c4 df       	rcall	.-120    	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00000001) {
 140:	c0 ff       	sbrs	r28, 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <_Z9send_byteh+0x52>
		set_H_and_delay();
 144:	b9 df       	rcall	.-142    	; 0xb8 <_Z15set_H_and_delayv>
 146:	01 c0       	rjmp	.+2      	; 0x14a <_Z9send_byteh+0x54>
	}
	else {
		set_L_and_delay();
 148:	bf df       	rcall	.-130    	; 0xc8 <_Z15set_L_and_delayv>
	}
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <_Z8send_GRBhhh>:

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	08 2f       	mov	r16, r24
 158:	16 2f       	mov	r17, r22
 15a:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < 10; i++){
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	ca 30       	cpi	r28, 0x0A	; 10
 160:	40 f4       	brcc	.+16     	; 0x172 <_Z8send_GRBhhh+0x24>
		send_byte (g);
 162:	80 2f       	mov	r24, r16
 164:	c8 df       	rcall	.-112    	; 0xf6 <_Z9send_byteh>
		send_byte (r);
 166:	81 2f       	mov	r24, r17
 168:	c6 df       	rcall	.-116    	; 0xf6 <_Z9send_byteh>
		send_byte (b);
 16a:	8d 2f       	mov	r24, r29
 16c:	c4 df       	rcall	.-120    	; 0xf6 <_Z9send_byteh>
		set_L_and_delay();
	}
}

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
	for (uint8_t i = 0; i < 10; i++){
 16e:	cf 5f       	subi	r28, 0xFF	; 255
 170:	f6 cf       	rjmp	.-20     	; 0x15e <_Z8send_GRBhhh+0x10>
		send_byte (g);
		send_byte (r);
		send_byte (b);
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <_Z17get_button_statusv>:

bool get_button_status(){
	ADCSRA |= (1 << ADSC);
 17c:	86 b1       	in	r24, 0x06	; 6
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC) );
 182:	36 99       	sbic	0x06, 6	; 6
 184:	fe cf       	rjmp	.-4      	; 0x182 <_Z17get_button_statusv+0x6>
	if(ADCH <= 150){
 186:	85 b1       	in	r24, 0x05	; 5
 188:	87 39       	cpi	r24, 0x97	; 151
 18a:	10 f4       	brcc	.+4      	; 0x190 <_Z17get_button_statusv+0x14>
		return true;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	08 95       	ret
	}
	else{
		return false;
 190:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 192:	08 95       	ret

00000194 <main>:

main()
{
	pinMode(DIN, OUTPUT);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	82 eb       	ldi	r24, 0xB2	; 178
 198:	4b df       	rcall	.-362    	; 0x30 <_Z7pinModehh>
	pinMode(IMP, OUTPUT);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	87 ea       	ldi	r24, 0xA7	; 167
 19e:	48 df       	rcall	.-368    	; 0x30 <_Z7pinModehh>
	pinMode(BTN, INPUT);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	83 ea       	ldi	r24, 0xA3	; 163
 1a4:	45 df       	rcall	.-374    	; 0x30 <_Z7pinModehh>
	digitalWrite(BTN, HIGH);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	83 ea       	ldi	r24, 0xA3	; 163
 1aa:	64 df       	rcall	.-312    	; 0x74 <_Z12digitalWritehh>
	PWM_generation();
 1ac:	95 df       	rcall	.-214    	; 0xd8 <_Z14PWM_generationv>
	ADC_init();
 1ae:	9c df       	rcall	.-200    	; 0xe8 <_Z8ADC_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f e7       	ldi	r18, 0x7F	; 127
 1b2:	88 e3       	ldi	r24, 0x38	; 56
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x22>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x2c>
 1c0:	00 00       	nop
	bool btn_status = false;
	//uint8_t n_of_diodes = 10;
	uint8_t cur_g = 255, cur_r = 255, cur_b = 255;
	//uint8_t prev_g = 0, prev_r = 0, prev_b = 0, min_brt = 0;
	//send_GRB(cur_g,cur_r,cur_b);
	int timebase = 0;
 1c2:	00 e0       	ldi	r16, 0x00	; 0
 1c4:	10 e0       	ldi	r17, 0x00	; 0
	ADC_init();
	uint8_t brt = 0,stage = 0;
	int8_t dir = 1;
	bool btn_status = false;
	//uint8_t n_of_diodes = 10;
	uint8_t cur_g = 255, cur_r = 255, cur_b = 255;
 1c6:	bb 24       	eor	r11, r11
 1c8:	ba 94       	dec	r11
 1ca:	cc 24       	eor	r12, r12
 1cc:	ca 94       	dec	r12
 1ce:	dd 24       	eor	r13, r13
 1d0:	da 94       	dec	r13
	digitalWrite(BTN, HIGH);
	PWM_generation();
	ADC_init();
	uint8_t brt = 0,stage = 0;
	int8_t dir = 1;
	bool btn_status = false;
 1d2:	e1 2c       	mov	r14, r1
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	PWM_generation();
	ADC_init();
	uint8_t brt = 0,stage = 0;
	int8_t dir = 1;
 1d4:	ff 24       	eor	r15, r15
 1d6:	f3 94       	inc	r15
	pinMode(IMP, OUTPUT);
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	PWM_generation();
	ADC_init();
	uint8_t brt = 0,stage = 0;
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
		//_delay_ms(10);
		//}
		//}
		
		
		if (get_button_status())	{
 1dc:	cf df       	rcall	.-98     	; 0x17c <_Z17get_button_statusv>
 1de:	88 23       	and	r24, r24
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0x50>
 1e2:	99 c0       	rjmp	.+306    	; 0x316 <main+0x182>
 1e4:	8f e5       	ldi	r24, 0x5F	; 95
 1e6:	9a ee       	ldi	r25, 0xEA	; 234
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x54>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x5a>
 1ee:	00 00       	nop
			_delay_ms(30);
			if (!get_button_status()){
 1f0:	c5 df       	rcall	.-118    	; 0x17c <_Z17get_button_statusv>
 1f2:	81 11       	cpse	r24, r1
 1f4:	25 c0       	rjmp	.+74     	; 0x240 <main+0xac>
				if(btn_status == false){
 1f6:	e1 10       	cpse	r14, r1
 1f8:	0e c0       	rjmp	.+28     	; 0x216 <main+0x82>
					send_GRB(cur_g,cur_r,cur_b);
 1fa:	4b 2d       	mov	r20, r11
 1fc:	6c 2d       	mov	r22, r12
 1fe:	8d 2d       	mov	r24, r13
 200:	a6 df       	rcall	.-180    	; 0x14e <_Z8send_GRBhhh>
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	20 e7       	ldi	r18, 0x70	; 112
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x74>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x7e>
 212:	00 00       	nop
 214:	0d c0       	rjmp	.+26     	; 0x230 <main+0x9c>
					_delay_ms(100);
					} else {
					send_GRB(0,0,0);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	98 df       	rcall	.-208    	; 0x14e <_Z8send_GRBhhh>
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	20 e7       	ldi	r18, 0x70	; 112
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	91 50       	subi	r25, 0x01	; 1
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x90>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x9a>
 22e:	00 00       	nop
					_delay_ms(100);
				}
				
				btn_status = !btn_status;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	e8 26       	eor	r14, r24
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0xa4>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0xaa>
 23e:	00 00       	nop
				_delay_ms(10);
			}
			timebase++;
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
			//digitalWrite(IMP, HIGH);

			brt += dir;
 244:	df 0d       	add	r29, r15
			if (brt >= 255) {
 246:	df 3f       	cpi	r29, 0xFF	; 255
 248:	19 f0       	breq	.+6      	; 0x250 <main+0xbc>
				dir = -1;
			}
			else if (brt == 0) {
 24a:	dd 23       	and	r29, r29
 24c:	21 f0       	breq	.+8      	; 0x256 <main+0xc2>
 24e:	05 c0       	rjmp	.+10     	; 0x25a <main+0xc6>
			timebase++;
			//digitalWrite(IMP, HIGH);

			brt += dir;
			if (brt >= 255) {
				dir = -1;
 250:	ff 24       	eor	r15, r15
 252:	fa 94       	dec	r15
 254:	02 c0       	rjmp	.+4      	; 0x25a <main+0xc6>
			}
			else if (brt == 0) {
				dir = 1;
 256:	ff 24       	eor	r15, r15
 258:	f3 94       	inc	r15
			}

			// time the animation
			if (timebase > 300) {
 25a:	0d 32       	cpi	r16, 0x2D	; 45
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	19 07       	cpc	r17, r25
 260:	4c f0       	brlt	.+18     	; 0x274 <main+0xe0>
				timebase = 0;
				stage += 1;
 262:	cf 5f       	subi	r28, 0xFF	; 255
				if (stage >= 8) {
 264:	c8 30       	cpi	r28, 0x08	; 8
 266:	18 f4       	brcc	.+6      	; 0x26e <main+0xda>
				dir = 1;
			}

			// time the animation
			if (timebase > 300) {
				timebase = 0;
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	03 c0       	rjmp	.+6      	; 0x274 <main+0xe0>
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e0       	ldi	r17, 0x00	; 0
				stage += 1;
				if (stage >= 8) {
					stage = 0;
 272:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
			if (stage == 0) {
 274:	c1 11       	cpse	r28, r1
 276:	08 c0       	rjmp	.+16     	; 0x288 <main+0xf4>
				send_GRB(0,brt,0);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	6d 2f       	mov	r22, r29
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	67 df       	rcall	.-306    	; 0x14e <_Z8send_GRBhhh>
				cur_g = 0;
				cur_r = brt;
 280:	cd 2e       	mov	r12, r29
				cur_b = 0;
 282:	b1 2c       	mov	r11, r1
					stage = 0;
				}
			}
			if (stage == 0) {
				send_GRB(0,brt,0);
				cur_g = 0;
 284:	d1 2c       	mov	r13, r1
 286:	47 c0       	rjmp	.+142    	; 0x316 <main+0x182>
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 1) {
 288:	c1 30       	cpi	r28, 0x01	; 1
 28a:	49 f4       	brne	.+18     	; 0x29e <main+0x10a>
				send_GRB(brt / 2,brt,0);
 28c:	dd 2e       	mov	r13, r29
 28e:	d6 94       	lsr	r13
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	6d 2f       	mov	r22, r29
 294:	8d 2d       	mov	r24, r13
 296:	5b df       	rcall	.-330    	; 0x14e <_Z8send_GRBhhh>
				cur_g = brt / 2;
				cur_r = brt;
 298:	cd 2e       	mov	r12, r29
				cur_b = 0;
 29a:	b1 2c       	mov	r11, r1
 29c:	3c c0       	rjmp	.+120    	; 0x316 <main+0x182>
				} else if (stage == 2) {
 29e:	c2 30       	cpi	r28, 0x02	; 2
 2a0:	41 f4       	brne	.+16     	; 0x2b2 <main+0x11e>
				send_GRB(brt,brt,0);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	6d 2f       	mov	r22, r29
 2a6:	8d 2f       	mov	r24, r29
 2a8:	52 df       	rcall	.-348    	; 0x14e <_Z8send_GRBhhh>
				cur_g = brt;
				cur_r = brt;
 2aa:	cd 2e       	mov	r12, r29
				cur_g = brt / 2;
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 2) {
				send_GRB(brt,brt,0);
				cur_g = brt;
 2ac:	dd 2e       	mov	r13, r29
				cur_r = brt;
				cur_b = 0;
 2ae:	b1 2c       	mov	r11, r1
 2b0:	32 c0       	rjmp	.+100    	; 0x316 <main+0x182>
				} else if (stage == 3) {
 2b2:	c3 30       	cpi	r28, 0x03	; 3
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <main+0x132>
				send_GRB(brt,0,0);
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	8d 2f       	mov	r24, r29
 2bc:	48 df       	rcall	.-368    	; 0x14e <_Z8send_GRBhhh>
				cur_g = brt;
 2be:	dd 2e       	mov	r13, r29
				cur_r = 0;
				cur_b = 0;
 2c0:	b1 2c       	mov	r11, r1
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 3) {
				send_GRB(brt,0,0);
				cur_g = brt;
				cur_r = 0;
 2c2:	c1 2c       	mov	r12, r1
 2c4:	28 c0       	rjmp	.+80     	; 0x316 <main+0x182>
				cur_b = 0;
				} else if (stage == 4) {
 2c6:	c4 30       	cpi	r28, 0x04	; 4
 2c8:	41 f4       	brne	.+16     	; 0x2da <main+0x146>
				send_GRB(brt,0, brt);
 2ca:	4d 2f       	mov	r20, r29
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	8d 2f       	mov	r24, r29
 2d0:	3e df       	rcall	.-388    	; 0x14e <_Z8send_GRBhhh>
				cur_g = brt;
				cur_r = 0;
				cur_b = brt;
 2d2:	bd 2e       	mov	r11, r29
				cur_g = brt;
				cur_r = 0;
				cur_b = 0;
				} else if (stage == 4) {
				send_GRB(brt,0, brt);
				cur_g = brt;
 2d4:	dd 2e       	mov	r13, r29
				cur_r = 0;
 2d6:	c1 2c       	mov	r12, r1
 2d8:	1e c0       	rjmp	.+60     	; 0x316 <main+0x182>
				cur_b = brt;
				} else if (stage == 5) {
 2da:	c5 30       	cpi	r28, 0x05	; 5
 2dc:	41 f4       	brne	.+16     	; 0x2ee <main+0x15a>
				send_GRB(0, 0, brt);
 2de:	4d 2f       	mov	r20, r29
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	34 df       	rcall	.-408    	; 0x14e <_Z8send_GRBhhh>
				cur_g = 0;
				cur_r = 0;
				cur_b = brt;
 2e6:	bd 2e       	mov	r11, r29
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 5) {
				send_GRB(0, 0, brt);
				cur_g = 0;
				cur_r = 0;
 2e8:	c1 2c       	mov	r12, r1
				cur_g = brt;
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 5) {
				send_GRB(0, 0, brt);
				cur_g = 0;
 2ea:	d1 2c       	mov	r13, r1
 2ec:	14 c0       	rjmp	.+40     	; 0x316 <main+0x182>
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 6) {
 2ee:	c6 30       	cpi	r28, 0x06	; 6
 2f0:	49 f4       	brne	.+18     	; 0x304 <main+0x170>
				send_GRB(0, brt / 2, brt);
 2f2:	cd 2e       	mov	r12, r29
 2f4:	c6 94       	lsr	r12
 2f6:	4d 2f       	mov	r20, r29
 2f8:	6c 2d       	mov	r22, r12
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	28 df       	rcall	.-432    	; 0x14e <_Z8send_GRBhhh>
				cur_g = 0;
				cur_r = brt / 2;
				cur_b = brt;
 2fe:	bd 2e       	mov	r11, r29
				cur_g = 0;
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 6) {
				send_GRB(0, brt / 2, brt);
				cur_g = 0;
 300:	d1 2c       	mov	r13, r1
 302:	09 c0       	rjmp	.+18     	; 0x316 <main+0x182>
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
 304:	c7 30       	cpi	r28, 0x07	; 7
 306:	39 f4       	brne	.+14     	; 0x316 <main+0x182>
				send_GRB(brt, brt, brt);
 308:	4d 2f       	mov	r20, r29
 30a:	6d 2f       	mov	r22, r29
 30c:	8d 2f       	mov	r24, r29
 30e:	1f df       	rcall	.-450    	; 0x14e <_Z8send_GRBhhh>
				cur_g = brt;
				cur_r = brt;
				cur_b = brt;
 310:	bd 2e       	mov	r11, r29
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
				send_GRB(brt, brt, brt);
				cur_g = brt;
				cur_r = brt;
 312:	cd 2e       	mov	r12, r29
				cur_g = 0;
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
				send_GRB(brt, brt, brt);
				cur_g = brt;
 314:	dd 2e       	mov	r13, r29
 316:	8f ec       	ldi	r24, 0xCF	; 207
 318:	97 e0       	ldi	r25, 0x07	; 7
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x186>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x18c>
 320:	00 00       	nop
 322:	5c cf       	rjmp	.-328    	; 0x1dc <main+0x48>

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
