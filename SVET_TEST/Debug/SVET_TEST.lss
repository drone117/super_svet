
SVET_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000402  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d88  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000643  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c0  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094d  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000030ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	e9 d0       	rcall	.+466    	; 0x20e <main>
  3c:	e0 c1       	rjmp	.+960    	; 0x3fe <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z7pinModehh>:
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	
	/* Return data from data register */
	return EEDR;
}
  40:	98 2f       	mov	r25, r24
  42:	90 7f       	andi	r25, 0xF0	; 240
  44:	8f 70       	andi	r24, 0x0F	; 15
  46:	90 3a       	cpi	r25, 0xA0	; 160
  48:	29 f0       	breq	.+10     	; 0x54 <_Z7pinModehh+0x14>
  4a:	90 3b       	cpi	r25, 0xB0	; 176
  4c:	29 f4       	brne	.+10     	; 0x58 <_Z7pinModehh+0x18>
  4e:	e7 e3       	ldi	r30, 0x37	; 55
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	02 c0       	rjmp	.+4      	; 0x58 <_Z7pinModehh+0x18>
  54:	ea e3       	ldi	r30, 0x3A	; 58
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	90 81       	ld	r25, Z
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	08 2e       	mov	r0, r24
  60:	02 c0       	rjmp	.+4      	; 0x66 <_Z7pinModehh+0x26>
  62:	22 0f       	add	r18, r18
  64:	33 1f       	adc	r19, r19
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <_Z7pinModehh+0x22>
  6a:	20 95       	com	r18
  6c:	29 23       	and	r18, r25
  6e:	62 30       	cpi	r22, 0x02	; 2
  70:	40 f4       	brcc	.+16     	; 0x82 <__DATA_REGION_LENGTH__+0x2>
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <_Z7pinModehh+0x3a>
  76:	66 0f       	add	r22, r22
  78:	77 1f       	adc	r23, r23
  7a:	8a 95       	dec	r24
  7c:	e2 f7       	brpl	.-8      	; 0x76 <_Z7pinModehh+0x36>
  7e:	26 2b       	or	r18, r22
  80:	20 83       	st	Z, r18
  82:	08 95       	ret

00000084 <_Z12digitalWritehh>:
  84:	98 2f       	mov	r25, r24
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	90 3a       	cpi	r25, 0xA0	; 160
  8c:	29 f0       	breq	.+10     	; 0x98 <_Z12digitalWritehh+0x14>
  8e:	90 3b       	cpi	r25, 0xB0	; 176
  90:	29 f4       	brne	.+10     	; 0x9c <_Z12digitalWritehh+0x18>
  92:	e8 e3       	ldi	r30, 0x38	; 56
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <_Z12digitalWritehh+0x18>
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 2e       	mov	r0, r24
  a4:	02 c0       	rjmp	.+4      	; 0xaa <_Z12digitalWritehh+0x26>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <_Z12digitalWritehh+0x22>
  ae:	20 95       	com	r18
  b0:	29 23       	and	r18, r25
  b2:	62 30       	cpi	r22, 0x02	; 2
  b4:	40 f4       	brcc	.+16     	; 0xc6 <_Z12digitalWritehh+0x42>
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <_Z12digitalWritehh+0x3a>
  ba:	66 0f       	add	r22, r22
  bc:	77 1f       	adc	r23, r23
  be:	8a 95       	dec	r24
  c0:	e2 f7       	brpl	.-8      	; 0xba <_Z12digitalWritehh+0x36>
  c2:	26 2b       	or	r18, r22
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <_Z15set_H_and_delayv>:
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z15set_H_and_delayv+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z15set_H_and_delayv+0xe>
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	88 bb       	out	0x18, r24	; 24
  dc:	08 95       	ret

000000de <_Z15set_L_and_delayv>:
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <__stack+0xd>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__stack+0x13>
  f2:	08 95       	ret

000000f4 <_Z14PWM_generationv>:
  f4:	83 e2       	ldi	r24, 0x23	; 35
  f6:	80 bf       	out	0x30, r24	; 48
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	83 bf       	out	0x33, r24	; 51
  fc:	12 be       	out	0x32, r1	; 50
  fe:	8f e7       	ldi	r24, 0x7F	; 127
 100:	8c bf       	out	0x3c, r24	; 60
 102:	08 95       	ret

00000104 <_Z12EEPROM_writehh>:
 104:	e1 99       	sbic	0x1c, 1	; 28
 106:	fe cf       	rjmp	.-4      	; 0x104 <_Z12EEPROM_writehh>
 108:	1c ba       	out	0x1c, r1	; 28
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	7f bb       	out	0x1f, r23	; 31
 10e:	6e bb       	out	0x1e, r22	; 30
 110:	8d bb       	out	0x1d, r24	; 29
 112:	8c b3       	in	r24, 0x1c	; 28
 114:	84 60       	ori	r24, 0x04	; 4
 116:	8c bb       	out	0x1c, r24	; 28
 118:	8c b3       	in	r24, 0x1c	; 28
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	8c bb       	out	0x1c, r24	; 28
 11e:	08 95       	ret

00000120 <_Z9send_byteh>:

void send_byte(unsigned char b) {
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
	if (b & 0b10000000) {
 124:	88 23       	and	r24, r24
 126:	14 f4       	brge	.+4      	; 0x12c <_Z9send_byteh+0xc>
		set_H_and_delay();
 128:	cf df       	rcall	.-98     	; 0xc8 <_Z15set_H_and_delayv>
 12a:	01 c0       	rjmp	.+2      	; 0x12e <_Z9send_byteh+0xe>
	}
	else {
		set_L_and_delay();
 12c:	d8 df       	rcall	.-80     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b01000000) {
 12e:	c6 ff       	sbrs	r28, 6
 130:	02 c0       	rjmp	.+4      	; 0x136 <_Z9send_byteh+0x16>
		set_H_and_delay();
 132:	ca df       	rcall	.-108    	; 0xc8 <_Z15set_H_and_delayv>
 134:	01 c0       	rjmp	.+2      	; 0x138 <_Z9send_byteh+0x18>
	}
	else {
		set_L_and_delay();
 136:	d3 df       	rcall	.-90     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00100000) {
 138:	c5 ff       	sbrs	r28, 5
 13a:	02 c0       	rjmp	.+4      	; 0x140 <_Z9send_byteh+0x20>
		set_H_and_delay();
 13c:	c5 df       	rcall	.-118    	; 0xc8 <_Z15set_H_and_delayv>
 13e:	01 c0       	rjmp	.+2      	; 0x142 <_Z9send_byteh+0x22>
	}
	else {
		set_L_and_delay();
 140:	ce df       	rcall	.-100    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00010000) {
 142:	c4 ff       	sbrs	r28, 4
 144:	02 c0       	rjmp	.+4      	; 0x14a <_Z9send_byteh+0x2a>
		set_H_and_delay();
 146:	c0 df       	rcall	.-128    	; 0xc8 <_Z15set_H_and_delayv>
 148:	01 c0       	rjmp	.+2      	; 0x14c <_Z9send_byteh+0x2c>
	}
	else {
		set_L_and_delay();
 14a:	c9 df       	rcall	.-110    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00001000) {
 14c:	c3 ff       	sbrs	r28, 3
 14e:	02 c0       	rjmp	.+4      	; 0x154 <_Z9send_byteh+0x34>
		set_H_and_delay();
 150:	bb df       	rcall	.-138    	; 0xc8 <_Z15set_H_and_delayv>
 152:	01 c0       	rjmp	.+2      	; 0x156 <_Z9send_byteh+0x36>
	}
	else {
		set_L_and_delay();
 154:	c4 df       	rcall	.-120    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000100) {
 156:	c2 ff       	sbrs	r28, 2
 158:	02 c0       	rjmp	.+4      	; 0x15e <_Z9send_byteh+0x3e>
		set_H_and_delay();
 15a:	b6 df       	rcall	.-148    	; 0xc8 <_Z15set_H_and_delayv>
 15c:	01 c0       	rjmp	.+2      	; 0x160 <_Z9send_byteh+0x40>
	}
	else {
		set_L_and_delay();
 15e:	bf df       	rcall	.-130    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000010) {
 160:	c1 ff       	sbrs	r28, 1
 162:	02 c0       	rjmp	.+4      	; 0x168 <_Z9send_byteh+0x48>
		set_H_and_delay();
 164:	b1 df       	rcall	.-158    	; 0xc8 <_Z15set_H_and_delayv>
 166:	01 c0       	rjmp	.+2      	; 0x16a <_Z9send_byteh+0x4a>
	}
	else {
		set_L_and_delay();
 168:	ba df       	rcall	.-140    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000001) {
 16a:	c0 ff       	sbrs	r28, 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_Z9send_byteh+0x52>
		set_H_and_delay();
 16e:	ac df       	rcall	.-168    	; 0xc8 <_Z15set_H_and_delayv>
 170:	01 c0       	rjmp	.+2      	; 0x174 <_Z9send_byteh+0x54>
	}
	else {
		set_L_and_delay();
 172:	b5 df       	rcall	.-150    	; 0xde <_Z15set_L_and_delayv>
	}
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <_Z8send_GRBhhh>:

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	08 2f       	mov	r16, r24
 182:	16 2f       	mov	r17, r22
 184:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < 144; i++){
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	c0 39       	cpi	r28, 0x90	; 144
 18a:	40 f4       	brcc	.+16     	; 0x19c <_Z8send_GRBhhh+0x24>
		send_byte (g);
 18c:	80 2f       	mov	r24, r16
 18e:	c8 df       	rcall	.-112    	; 0x120 <_Z9send_byteh>
		send_byte (r);
 190:	81 2f       	mov	r24, r17
 192:	c6 df       	rcall	.-116    	; 0x120 <_Z9send_byteh>
		send_byte (b);
 194:	8d 2f       	mov	r24, r29
 196:	c4 df       	rcall	.-120    	; 0x120 <_Z9send_byteh>
		set_L_and_delay();
	}
}

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
	for (uint8_t i = 0; i < 144; i++){
 198:	cf 5f       	subi	r28, 0xFF	; 255
 19a:	f6 cf       	rjmp	.-20     	; 0x188 <_Z8send_GRBhhh+0x10>
		send_byte (g);
		send_byte (r);
		send_byte (b);
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <_Z8ADC_initv>:

void ADC_init(){ //ADC on A2
	uint16_t current_ADC_level = 0;

	uint8_t adc_lvl = 0;
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000111; //CLK/128 (~?kHz)
 1aa:	87 e8       	ldi	r24, 0x87	; 135
 1ac:	86 b9       	out	0x06, r24	; 6
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	83 b9       	out	0x03, r24	; 3
	ADCSRA |= (1 << ADSC);
 1b2:	86 b1       	in	r24, 0x06	; 6
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	86 b9       	out	0x06, r24	; 6

	for (uint8_t i = 0; i < 100; i++)
 1b8:	90 e0       	ldi	r25, 0x00	; 0
}



void ADC_init(){ //ADC on A2
	uint16_t current_ADC_level = 0;
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
	ADCSRA = 0b10000111; //CLK/128 (~?kHz)
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
	ADCSRA |= (1 << ADSC);

	for (uint8_t i = 0; i < 100; i++)
 1be:	94 36       	cpi	r25, 0x64	; 100
 1c0:	38 f4       	brcc	.+14     	; 0x1d0 <_Z8ADC_initv+0x2a>
	{
		while (ADCSRA & (1 << ADSC) );
 1c2:	36 99       	sbic	0x06, 6	; 6
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <_Z8ADC_initv+0x1c>
		adc_lvl = ADCH;
 1c6:	85 b1       	in	r24, 0x05	; 5
		current_ADC_level += adc_lvl;
 1c8:	28 0f       	add	r18, r24
 1ca:	31 1d       	adc	r19, r1
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
	ADCSRA = 0b10000111; //CLK/128 (~?kHz)
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
	ADCSRA |= (1 << ADSC);

	for (uint8_t i = 0; i < 100; i++)
 1cc:	9f 5f       	subi	r25, 0xFF	; 255
 1ce:	f7 cf       	rjmp	.-18     	; 0x1be <_Z8ADC_initv+0x18>
		while (ADCSRA & (1 << ADSC) );
		adc_lvl = ADCH;
		current_ADC_level += adc_lvl;
	}
	
	current_ADC_level = current_ADC_level / 100u;
 1d0:	c9 01       	movw	r24, r18
 1d2:	64 e6       	ldi	r22, 0x64	; 100
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	ff d0       	rcall	.+510    	; 0x3d6 <__udivmodhi4>
	current_ADC_level = current_ADC_level * 8u;
 1d8:	cb 01       	movw	r24, r22
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
	current_ADC_level = current_ADC_level / 10u;
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	f5 d0       	rcall	.+490    	; 0x3d6 <__udivmodhi4>
	::base_ADC_level = (uint8_t)(current_ADC_level);
 1ec:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f0:	08 95       	ret

000001f2 <_Z17get_button_statusv>:

}

bool get_button_status(){
	ADCSRA |= (1 << ADSC);
 1f2:	86 b1       	in	r24, 0x06	; 6
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC) );
 1f8:	36 99       	sbic	0x06, 6	; 6
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <_Z17get_button_statusv+0x6>
	if(ADCH <= base_ADC_level){
 1fc:	95 b1       	in	r25, 0x05	; 5
 1fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 202:	89 17       	cp	r24, r25
 204:	10 f0       	brcs	.+4      	; 0x20a <_Z17get_button_statusv+0x18>
		return true;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret
	}
	else{
		return false;
 20a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 20c:	08 95       	ret

0000020e <main>:


main()
{
	pinMode(DIN, OUTPUT);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	82 eb       	ldi	r24, 0xB2	; 178
 212:	16 df       	rcall	.-468    	; 0x40 <_Z7pinModehh>
	pinMode(IMP, OUTPUT);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	87 ea       	ldi	r24, 0xA7	; 167
 218:	13 df       	rcall	.-474    	; 0x40 <_Z7pinModehh>
	pinMode(BTN, INPUT);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	83 ea       	ldi	r24, 0xA3	; 163
 21e:	10 df       	rcall	.-480    	; 0x40 <_Z7pinModehh>
	digitalWrite(BTN, HIGH);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	83 ea       	ldi	r24, 0xA3	; 163
 224:	2f df       	rcall	.-418    	; 0x84 <_Z12digitalWritehh>
	ADC_init();
 226:	bf df       	rcall	.-130    	; 0x1a6 <_Z8ADC_initv>
	PWM_generation();
 228:	65 df       	rcall	.-310    	; 0xf4 <_Z14PWM_generationv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	8f e4       	ldi	r24, 0x4F	; 79
 22c:	93 ec       	ldi	r25, 0xC3	; 195
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x20>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x26>
 234:	00 00       	nop
	//uint8_t stage = EEPROM_read(3);
	//uint8_t brt = EEPROM_read(4);

	int timebase = 0;
	_delay_ms(10);
	send_GRB(255,255,255);
 236:	4f ef       	ldi	r20, 0xFF	; 255
 238:	6f ef       	ldi	r22, 0xFF	; 255
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	9d df       	rcall	.-198    	; 0x178 <_Z8send_GRBhhh>
	//uint8_t cur_r = EEPROM_read(1);
	//uint8_t cur_b = EEPROM_read(2);
	//uint8_t stage = EEPROM_read(3);
	//uint8_t brt = EEPROM_read(4);

	int timebase = 0;
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	d0 e0       	ldi	r29, 0x00	; 0
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();
	uint8_t brt = 0,stage = 0, cur_g = 0, cur_r = 0, cur_b = 0;
	int8_t dir = 1;
	bool btn_status = false, btn_press = false;
 242:	f1 2c       	mov	r15, r1
 244:	e1 2c       	mov	r14, r1
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();
	uint8_t brt = 0,stage = 0, cur_g = 0, cur_r = 0, cur_b = 0;
	int8_t dir = 1;
 246:	dd 24       	eor	r13, r13
 248:	d3 94       	inc	r13
	pinMode(IMP, OUTPUT);
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();
	uint8_t brt = 0,stage = 0, cur_g = 0, cur_r = 0, cur_b = 0;
 24a:	a1 2c       	mov	r10, r1
 24c:	b1 2c       	mov	r11, r1
 24e:	c1 2c       	mov	r12, r1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(10);
	send_GRB(255,255,255);
	while (1)
	{
		
		if (get_button_status())	{
 254:	ce df       	rcall	.-100    	; 0x1f2 <_Z17get_button_statusv>
 256:	88 23       	and	r24, r24
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x4e>
 25a:	b2 c0       	rjmp	.+356    	; 0x3c0 <main+0x1b2>
			
			timebase++;
 25c:	21 96       	adiw	r28, 0x01	; 1
			//digitalWrite(IMP, HIGH);
			if (timebase >= 50 && timebase < 1000 && btn_press == false){
 25e:	ce 01       	movw	r24, r28
 260:	c2 97       	sbiw	r24, 0x32	; 50
 262:	86 3b       	cpi	r24, 0xB6	; 182
 264:	93 40       	sbci	r25, 0x03	; 3
 266:	b8 f5       	brcc	.+110    	; 0x2d6 <main+0xc8>
 268:	f1 10       	cpse	r15, r1
 26a:	35 c0       	rjmp	.+106    	; 0x2d6 <main+0xc8>
				
				if (btn_status == false){
 26c:	e1 10       	cpse	r14, r1
 26e:	12 c0       	rjmp	.+36     	; 0x294 <main+0x86>
					
					send_GRB(cur_g, cur_r, cur_b);
 270:	4a 2d       	mov	r20, r10
 272:	6b 2d       	mov	r22, r11
 274:	8c 2d       	mov	r24, r12
 276:	80 df       	rcall	.-256    	; 0x178 <_Z8send_GRBhhh>
					btn_status = !btn_status;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	e8 26       	eor	r14, r24
 27c:	8f e7       	ldi	r24, 0x7F	; 127
 27e:	9a e1       	ldi	r25, 0x1A	; 26
 280:	26 e0       	ldi	r18, 0x06	; 6
 282:	81 50       	subi	r24, 0x01	; 1
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	20 40       	sbci	r18, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x74>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x7e>
 28c:	00 00       	nop
					btn_press = true;
 28e:	ff 24       	eor	r15, r15
 290:	f3 94       	inc	r15
 292:	9a c0       	rjmp	.+308    	; 0x3c8 <main+0x1ba>
					_delay_ms(100);
				}
				else {
					send_GRB(0,0,0);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	6e df       	rcall	.-292    	; 0x178 <_Z8send_GRBhhh>
					EEPROM_write(cur_g, 0);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	8c 2d       	mov	r24, r12
 2a0:	31 df       	rcall	.-414    	; 0x104 <_Z12EEPROM_writehh>
					EEPROM_write(cur_r, 1);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	8b 2d       	mov	r24, r11
 2a6:	2e df       	rcall	.-420    	; 0x104 <_Z12EEPROM_writehh>
					EEPROM_write(cur_b, 2);
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	8a 2d       	mov	r24, r10
 2ac:	2b df       	rcall	.-426    	; 0x104 <_Z12EEPROM_writehh>
					EEPROM_write(stage, 3);
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	80 2f       	mov	r24, r16
 2b2:	28 df       	rcall	.-432    	; 0x104 <_Z12EEPROM_writehh>
					EEPROM_write(brt, 4);
 2b4:	64 e0       	ldi	r22, 0x04	; 4
 2b6:	81 2f       	mov	r24, r17
 2b8:	25 df       	rcall	.-438    	; 0x104 <_Z12EEPROM_writehh>
					btn_status = !btn_status;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	e8 26       	eor	r14, r24
 2be:	8f e7       	ldi	r24, 0x7F	; 127
 2c0:	9a e1       	ldi	r25, 0x1A	; 26
 2c2:	26 e0       	ldi	r18, 0x06	; 6
 2c4:	81 50       	subi	r24, 0x01	; 1
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	20 40       	sbci	r18, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0xb6>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0xc0>
 2ce:	00 00       	nop
					btn_press = true;
 2d0:	ff 24       	eor	r15, r15
 2d2:	f3 94       	inc	r15
 2d4:	79 c0       	rjmp	.+242    	; 0x3c8 <main+0x1ba>
					_delay_ms(100);
				}
			}
			else if (timebase >= 1000)
 2d6:	c8 3e       	cpi	r28, 0xE8	; 232
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	d8 07       	cpc	r29, r24
 2dc:	0c f4       	brge	.+2      	; 0x2e0 <main+0xd2>
 2de:	74 c0       	rjmp	.+232    	; 0x3c8 <main+0x1ba>
			{
				
				
				brt += dir;
 2e0:	1d 0d       	add	r17, r13
				if (brt >= 255) {
 2e2:	1f 3f       	cpi	r17, 0xFF	; 255
 2e4:	19 f0       	breq	.+6      	; 0x2ec <main+0xde>
					
					dir = -1;
				}
				else if (brt == 0) {
 2e6:	11 23       	and	r17, r17
 2e8:	21 f0       	breq	.+8      	; 0x2f2 <main+0xe4>
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <main+0xe8>
				
				
				brt += dir;
				if (brt >= 255) {
					
					dir = -1;
 2ec:	dd 24       	eor	r13, r13
 2ee:	da 94       	dec	r13
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <main+0xe8>
				}
				else if (brt == 0) {
					
					dir = 1;
 2f2:	dd 24       	eor	r13, r13
 2f4:	d3 94       	inc	r13
				}

				// time the animation
				if (timebase > 1509) {
 2f6:	c6 3e       	cpi	r28, 0xE6	; 230
 2f8:	95 e0       	ldi	r25, 0x05	; 5
 2fa:	d9 07       	cpc	r29, r25
 2fc:	7c f0       	brlt	.+30     	; 0x31c <main+0x10e>
					
					timebase = 1000;
					stage += 1;
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
					brt = 0;
					dir = 1;
					if (stage >= 8) {
 300:	08 30       	cpi	r16, 0x08	; 8
 302:	30 f4       	brcc	.+12     	; 0x310 <main+0x102>
				}

				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
 304:	c8 ee       	ldi	r28, 0xE8	; 232
 306:	d3 e0       	ldi	r29, 0x03	; 3
					stage += 1;
					brt = 0;
					dir = 1;
 308:	dd 24       	eor	r13, r13
 30a:	d3 94       	inc	r13
				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
					stage += 1;
					brt = 0;
 30c:	10 e0       	ldi	r17, 0x00	; 0
 30e:	06 c0       	rjmp	.+12     	; 0x31c <main+0x10e>
				}

				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
 310:	c8 ee       	ldi	r28, 0xE8	; 232
 312:	d3 e0       	ldi	r29, 0x03	; 3
					stage += 1;
					brt = 0;
					dir = 1;
 314:	dd 24       	eor	r13, r13
 316:	d3 94       	inc	r13
					if (stage >= 8) {
						stage = 0;
 318:	00 e0       	ldi	r16, 0x00	; 0
				// time the animation
				if (timebase > 1509) {
					
					timebase = 1000;
					stage += 1;
					brt = 0;
 31a:	10 e0       	ldi	r17, 0x00	; 0
						stage = 0;
					}
				}
				//send_GRB(0,0,255-ADCH);

				if (stage == 0) {
 31c:	01 11       	cpse	r16, r1
 31e:	08 c0       	rjmp	.+16     	; 0x330 <main+0x122>
					send_GRB(0,brt,0);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	61 2f       	mov	r22, r17
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	28 df       	rcall	.-432    	; 0x178 <_Z8send_GRBhhh>
					cur_g = 0;
					cur_r = brt;
 328:	b1 2e       	mov	r11, r17
					cur_b = 0;
 32a:	a1 2c       	mov	r10, r1
				}
				//send_GRB(0,0,255-ADCH);

				if (stage == 0) {
					send_GRB(0,brt,0);
					cur_g = 0;
 32c:	c1 2c       	mov	r12, r1
 32e:	4c c0       	rjmp	.+152    	; 0x3c8 <main+0x1ba>
					cur_r = brt;
					cur_b = 0;
					} else if (stage == 1) {
 330:	01 30       	cpi	r16, 0x01	; 1
 332:	49 f4       	brne	.+18     	; 0x346 <main+0x138>
					send_GRB(brt / 2,brt,0);
 334:	c1 2e       	mov	r12, r17
 336:	c6 94       	lsr	r12
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	61 2f       	mov	r22, r17
 33c:	8c 2d       	mov	r24, r12
 33e:	1c df       	rcall	.-456    	; 0x178 <_Z8send_GRBhhh>
					cur_g = brt / 2;
					cur_r = brt;
 340:	b1 2e       	mov	r11, r17
					cur_b = 0;
 342:	a1 2c       	mov	r10, r1
 344:	41 c0       	rjmp	.+130    	; 0x3c8 <main+0x1ba>
					} else if (stage == 2) {
 346:	02 30       	cpi	r16, 0x02	; 2
 348:	41 f4       	brne	.+16     	; 0x35a <main+0x14c>
					send_GRB(brt,brt,0);
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	61 2f       	mov	r22, r17
 34e:	81 2f       	mov	r24, r17
 350:	13 df       	rcall	.-474    	; 0x178 <_Z8send_GRBhhh>
					cur_g = brt;
					cur_r = brt;
 352:	b1 2e       	mov	r11, r17
					cur_g = brt / 2;
					cur_r = brt;
					cur_b = 0;
					} else if (stage == 2) {
					send_GRB(brt,brt,0);
					cur_g = brt;
 354:	c1 2e       	mov	r12, r17
					cur_r = brt;
					cur_b = 0;
 356:	a1 2c       	mov	r10, r1
 358:	37 c0       	rjmp	.+110    	; 0x3c8 <main+0x1ba>
					} else if (stage == 3) {
 35a:	03 30       	cpi	r16, 0x03	; 3
 35c:	41 f4       	brne	.+16     	; 0x36e <main+0x160>
					send_GRB(brt,0,0);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	81 2f       	mov	r24, r17
 364:	09 df       	rcall	.-494    	; 0x178 <_Z8send_GRBhhh>
					cur_g = brt;
 366:	c1 2e       	mov	r12, r17
					cur_r = 0;
					cur_b = 0;
 368:	a1 2c       	mov	r10, r1
					cur_r = brt;
					cur_b = 0;
					} else if (stage == 3) {
					send_GRB(brt,0,0);
					cur_g = brt;
					cur_r = 0;
 36a:	b1 2c       	mov	r11, r1
 36c:	2d c0       	rjmp	.+90     	; 0x3c8 <main+0x1ba>
					cur_b = 0;
					} else if (stage == 4) {
 36e:	04 30       	cpi	r16, 0x04	; 4
 370:	41 f4       	brne	.+16     	; 0x382 <main+0x174>
					send_GRB(brt,0, brt);
 372:	41 2f       	mov	r20, r17
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	81 2f       	mov	r24, r17
 378:	ff de       	rcall	.-514    	; 0x178 <_Z8send_GRBhhh>
					cur_g = brt;
					cur_r = 0;
					cur_b = brt;
 37a:	a1 2e       	mov	r10, r17
					cur_g = brt;
					cur_r = 0;
					cur_b = 0;
					} else if (stage == 4) {
					send_GRB(brt,0, brt);
					cur_g = brt;
 37c:	c1 2e       	mov	r12, r17
					cur_r = 0;
 37e:	b1 2c       	mov	r11, r1
 380:	23 c0       	rjmp	.+70     	; 0x3c8 <main+0x1ba>
					cur_b = brt;
					} else if (stage == 5) {
 382:	05 30       	cpi	r16, 0x05	; 5
 384:	41 f4       	brne	.+16     	; 0x396 <main+0x188>
					send_GRB(0, 0, brt);
 386:	41 2f       	mov	r20, r17
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	f5 de       	rcall	.-534    	; 0x178 <_Z8send_GRBhhh>
					cur_g = 0;
					cur_r = 0;
					cur_b = brt;
 38e:	a1 2e       	mov	r10, r17
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 5) {
					send_GRB(0, 0, brt);
					cur_g = 0;
					cur_r = 0;
 390:	b1 2c       	mov	r11, r1
					cur_g = brt;
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 5) {
					send_GRB(0, 0, brt);
					cur_g = 0;
 392:	c1 2c       	mov	r12, r1
 394:	19 c0       	rjmp	.+50     	; 0x3c8 <main+0x1ba>
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 6) {
 396:	06 30       	cpi	r16, 0x06	; 6
 398:	49 f4       	brne	.+18     	; 0x3ac <main+0x19e>
					send_GRB(0, brt / 2, brt);
 39a:	b1 2e       	mov	r11, r17
 39c:	b6 94       	lsr	r11
 39e:	41 2f       	mov	r20, r17
 3a0:	6b 2d       	mov	r22, r11
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	e9 de       	rcall	.-558    	; 0x178 <_Z8send_GRBhhh>
					cur_g = 0;
					cur_r = brt / 2;
					cur_b = brt;
 3a6:	a1 2e       	mov	r10, r17
					cur_g = 0;
					cur_r = 0;
					cur_b = brt;
					} else if (stage == 6) {
					send_GRB(0, brt / 2, brt);
					cur_g = 0;
 3a8:	c1 2c       	mov	r12, r1
 3aa:	0e c0       	rjmp	.+28     	; 0x3c8 <main+0x1ba>
					cur_r = brt / 2;
					cur_b = brt;
					} else if (stage == 7) {
 3ac:	07 30       	cpi	r16, 0x07	; 7
 3ae:	61 f4       	brne	.+24     	; 0x3c8 <main+0x1ba>
					send_GRB(brt, brt, brt);
 3b0:	41 2f       	mov	r20, r17
 3b2:	61 2f       	mov	r22, r17
 3b4:	81 2f       	mov	r24, r17
 3b6:	e0 de       	rcall	.-576    	; 0x178 <_Z8send_GRBhhh>
					cur_g = brt;
					cur_r = brt;
					cur_b = brt;
 3b8:	a1 2e       	mov	r10, r17
					cur_r = brt / 2;
					cur_b = brt;
					} else if (stage == 7) {
					send_GRB(brt, brt, brt);
					cur_g = brt;
					cur_r = brt;
 3ba:	b1 2e       	mov	r11, r17
					cur_g = 0;
					cur_r = brt / 2;
					cur_b = brt;
					} else if (stage == 7) {
					send_GRB(brt, brt, brt);
					cur_g = brt;
 3bc:	c1 2e       	mov	r12, r17
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <main+0x1ba>
			}
		}
		else {
			btn_status = false;
			btn_press = false;
			timebase = 0;
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		}
		else {
			btn_status = false;
			btn_press = false;
 3c4:	f1 2c       	mov	r15, r1
					cur_b = brt;
				}
			}
		}
		else {
			btn_status = false;
 3c6:	e1 2c       	mov	r14, r1
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	97 e2       	ldi	r25, 0x27	; 39
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x1be>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x1c4>
 3d2:	00 00       	nop
 3d4:	3f cf       	rjmp	.-386    	; 0x254 <main+0x46>

000003d6 <__udivmodhi4>:
 3d6:	aa 1b       	sub	r26, r26
 3d8:	bb 1b       	sub	r27, r27
 3da:	51 e1       	ldi	r21, 0x11	; 17
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <__udivmodhi4_ep>

000003de <__udivmodhi4_loop>:
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	a6 17       	cp	r26, r22
 3e4:	b7 07       	cpc	r27, r23
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <__udivmodhi4_ep>
 3e8:	a6 1b       	sub	r26, r22
 3ea:	b7 0b       	sbc	r27, r23

000003ec <__udivmodhi4_ep>:
 3ec:	88 1f       	adc	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	5a 95       	dec	r21
 3f2:	a9 f7       	brne	.-22     	; 0x3de <__udivmodhi4_loop>
 3f4:	80 95       	com	r24
 3f6:	90 95       	com	r25
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	08 95       	ret

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
