
SVET_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ced  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000634  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000728  00000000  00000000  00001779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053e  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a6  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	a5 d0       	rcall	.+330    	; 0x176 <main>
  2c:	73 c1       	rjmp	.+742    	; 0x314 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <_Z7pinModehh>:
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	
	/* Return data from data register */
	return EEDR;
}
  30:	98 2f       	mov	r25, r24
  32:	90 7f       	andi	r25, 0xF0	; 240
  34:	8f 70       	andi	r24, 0x0F	; 15
  36:	90 3a       	cpi	r25, 0xA0	; 160
  38:	29 f0       	breq	.+10     	; 0x44 <__SREG__+0x5>
  3a:	90 3b       	cpi	r25, 0xB0	; 176
  3c:	29 f4       	brne	.+10     	; 0x48 <__SREG__+0x9>
  3e:	e7 e3       	ldi	r30, 0x37	; 55
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	ea e3       	ldi	r30, 0x3A	; 58
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	90 81       	ld	r25, Z
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	08 2e       	mov	r0, r24
  50:	02 c0       	rjmp	.+4      	; 0x56 <__SREG__+0x17>
  52:	22 0f       	add	r18, r18
  54:	33 1f       	adc	r19, r19
  56:	0a 94       	dec	r0
  58:	e2 f7       	brpl	.-8      	; 0x52 <__SREG__+0x13>
  5a:	20 95       	com	r18
  5c:	29 23       	and	r18, r25
  5e:	62 30       	cpi	r22, 0x02	; 2
  60:	40 f4       	brcc	.+16     	; 0x72 <__SREG__+0x33>
  62:	70 e0       	ldi	r23, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <__SREG__+0x2b>
  66:	66 0f       	add	r22, r22
  68:	77 1f       	adc	r23, r23
  6a:	8a 95       	dec	r24
  6c:	e2 f7       	brpl	.-8      	; 0x66 <__SREG__+0x27>
  6e:	26 2b       	or	r18, r22
  70:	20 83       	st	Z, r18
  72:	08 95       	ret

00000074 <_Z12digitalWritehh>:
  74:	98 2f       	mov	r25, r24
  76:	90 7f       	andi	r25, 0xF0	; 240
  78:	8f 70       	andi	r24, 0x0F	; 15
  7a:	90 3a       	cpi	r25, 0xA0	; 160
  7c:	29 f0       	breq	.+10     	; 0x88 <__DATA_REGION_LENGTH__+0x8>
  7e:	90 3b       	cpi	r25, 0xB0	; 176
  80:	29 f4       	brne	.+10     	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  82:	e8 e3       	ldi	r30, 0x38	; 56
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  88:	eb e3       	ldi	r30, 0x3B	; 59
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	90 81       	ld	r25, Z
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	08 2e       	mov	r0, r24
  94:	02 c0       	rjmp	.+4      	; 0x9a <__DATA_REGION_LENGTH__+0x1a>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <__DATA_REGION_LENGTH__+0x16>
  9e:	20 95       	com	r18
  a0:	29 23       	and	r18, r25
  a2:	62 30       	cpi	r22, 0x02	; 2
  a4:	40 f4       	brcc	.+16     	; 0xb6 <__DATA_REGION_LENGTH__+0x36>
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <__DATA_REGION_LENGTH__+0x2e>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <__DATA_REGION_LENGTH__+0x2a>
  b2:	26 2b       	or	r18, r22
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <_Z15set_H_and_delayv>:
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <_Z15set_H_and_delayv+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_Z15set_H_and_delayv+0xc>
  c4:	18 ba       	out	0x18, r1	; 24
  c6:	08 95       	ret

000000c8 <_Z15set_L_and_delayv>:
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	18 ba       	out	0x18, r1	; 24
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z15set_L_and_delayv+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z15set_L_and_delayv+0xe>
  d6:	08 95       	ret

000000d8 <_Z9send_byteh>:

void send_byte(unsigned char b) {
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
	if (b & 0b10000000) {
  dc:	88 23       	and	r24, r24
  de:	14 f4       	brge	.+4      	; 0xe4 <__stack+0x5>
		set_H_and_delay();
  e0:	eb df       	rcall	.-42     	; 0xb8 <_Z15set_H_and_delayv>
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <__stack+0x7>
	}
	else {
		set_L_and_delay();
  e4:	f1 df       	rcall	.-30     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b01000000) {
  e6:	c6 ff       	sbrs	r28, 6
  e8:	02 c0       	rjmp	.+4      	; 0xee <__stack+0xf>
		set_H_and_delay();
  ea:	e6 df       	rcall	.-52     	; 0xb8 <_Z15set_H_and_delayv>
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <__stack+0x11>
	}
	else {
		set_L_and_delay();
  ee:	ec df       	rcall	.-40     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00100000) {
  f0:	c5 ff       	sbrs	r28, 5
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__stack+0x19>
		set_H_and_delay();
  f4:	e1 df       	rcall	.-62     	; 0xb8 <_Z15set_H_and_delayv>
  f6:	01 c0       	rjmp	.+2      	; 0xfa <__stack+0x1b>
	}
	else {
		set_L_and_delay();
  f8:	e7 df       	rcall	.-50     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00010000) {
  fa:	c4 ff       	sbrs	r28, 4
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__stack+0x23>
		set_H_and_delay();
  fe:	dc df       	rcall	.-72     	; 0xb8 <_Z15set_H_and_delayv>
 100:	01 c0       	rjmp	.+2      	; 0x104 <__stack+0x25>
	}
	else {
		set_L_and_delay();
 102:	e2 df       	rcall	.-60     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00001000) {
 104:	c3 ff       	sbrs	r28, 3
 106:	02 c0       	rjmp	.+4      	; 0x10c <__stack+0x2d>
		set_H_and_delay();
 108:	d7 df       	rcall	.-82     	; 0xb8 <_Z15set_H_and_delayv>
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__stack+0x2f>
	}
	else {
		set_L_and_delay();
 10c:	dd df       	rcall	.-70     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00000100) {
 10e:	c2 ff       	sbrs	r28, 2
 110:	02 c0       	rjmp	.+4      	; 0x116 <__stack+0x37>
		set_H_and_delay();
 112:	d2 df       	rcall	.-92     	; 0xb8 <_Z15set_H_and_delayv>
 114:	01 c0       	rjmp	.+2      	; 0x118 <__stack+0x39>
	}
	else {
		set_L_and_delay();
 116:	d8 df       	rcall	.-80     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00000010) {
 118:	c1 ff       	sbrs	r28, 1
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__stack+0x41>
		set_H_and_delay();
 11c:	cd df       	rcall	.-102    	; 0xb8 <_Z15set_H_and_delayv>
 11e:	01 c0       	rjmp	.+2      	; 0x122 <__stack+0x43>
	}
	else {
		set_L_and_delay();
 120:	d3 df       	rcall	.-90     	; 0xc8 <_Z15set_L_and_delayv>
	}
	if (b & 0b00000001) {
 122:	c0 ff       	sbrs	r28, 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <__stack+0x4b>
		set_H_and_delay();
 126:	c8 df       	rcall	.-112    	; 0xb8 <_Z15set_H_and_delayv>
 128:	01 c0       	rjmp	.+2      	; 0x12c <__stack+0x4d>
	}
	else {
		set_L_and_delay();
 12a:	ce df       	rcall	.-100    	; 0xc8 <_Z15set_L_and_delayv>
	}
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <_Z8send_GRBhhh>:

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	08 2f       	mov	r16, r24
 13a:	16 2f       	mov	r17, r22
 13c:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < 10; i++){
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	ca 30       	cpi	r28, 0x0A	; 10
 142:	40 f4       	brcc	.+16     	; 0x154 <_Z8send_GRBhhh+0x24>
		send_byte (g);
 144:	80 2f       	mov	r24, r16
 146:	c8 df       	rcall	.-112    	; 0xd8 <_Z9send_byteh>
		send_byte (r);
 148:	81 2f       	mov	r24, r17
 14a:	c6 df       	rcall	.-116    	; 0xd8 <_Z9send_byteh>
		send_byte (b);
 14c:	8d 2f       	mov	r24, r29
 14e:	c4 df       	rcall	.-120    	; 0xd8 <_Z9send_byteh>
		set_L_and_delay();
	}
}

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
	for (uint8_t i = 0; i < 10; i++){
 150:	cf 5f       	subi	r28, 0xFF	; 255
 152:	f6 cf       	rjmp	.-20     	; 0x140 <_Z8send_GRBhhh+0x10>
		send_byte (g);
		send_byte (r);
		send_byte (b);
	}
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <_Z17get_button_statusv>:

bool get_button_status(){
	ADCSRA |= (1 << ADSC);
 15e:	86 b1       	in	r24, 0x06	; 6
 160:	80 64       	ori	r24, 0x40	; 64
 162:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC) );
 164:	36 99       	sbic	0x06, 6	; 6
 166:	fe cf       	rjmp	.-4      	; 0x164 <_Z17get_button_statusv+0x6>
	if(ADCH <= 150){
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	87 39       	cpi	r24, 0x97	; 151
 16c:	10 f4       	brcc	.+4      	; 0x172 <_Z17get_button_statusv+0x14>
		return true;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
	}
	else{
		return false;
 172:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 174:	08 95       	ret

00000176 <main>:

main()
{
	pinMode(DIN, OUTPUT);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	82 eb       	ldi	r24, 0xB2	; 178
 17a:	5a df       	rcall	.-332    	; 0x30 <_Z7pinModehh>
	pinMode(IMP, OUTPUT);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	87 ea       	ldi	r24, 0xA7	; 167
 180:	57 df       	rcall	.-338    	; 0x30 <_Z7pinModehh>
	pinMode(BTN, INPUT);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	83 ea       	ldi	r24, 0xA3	; 163
 186:	54 df       	rcall	.-344    	; 0x30 <_Z7pinModehh>
	digitalWrite(BTN, HIGH);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	83 ea       	ldi	r24, 0xA3	; 163
 18c:	73 df       	rcall	.-282    	; 0x74 <_Z12digitalWritehh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x1c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x22>
 198:	00 00       	nop
	
	uint8_t cur_g = 0, cur_r = 0, cur_b = 0;
	//uint8_t prev_g = 0, prev_r = 0, prev_b = 0, min_brt = 0;
	int timebase = 0;
	_delay_ms(10);
	send_GRB(255,255,255);
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	6f ef       	ldi	r22, 0xFF	; 255
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	c7 df       	rcall	.-114    	; 0x130 <_Z8send_GRBhhh>
	//uint8_t cur_r = EEPROM_read(1);
	//uint8_t cur_b = EEPROM_read(2);
	
	uint8_t cur_g = 0, cur_r = 0, cur_b = 0;
	//uint8_t prev_g = 0, prev_r = 0, prev_b = 0, min_brt = 0;
	int timebase = 0;
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
	
	//uint8_t cur_g = EEPROM_read(0);
	//uint8_t cur_r = EEPROM_read(1);
	//uint8_t cur_b = EEPROM_read(2);
	
	uint8_t cur_g = 0, cur_r = 0, cur_b = 0;
 1a6:	b1 2c       	mov	r11, r1
 1a8:	c1 2c       	mov	r12, r1
 1aa:	d1 2c       	mov	r13, r1
	digitalWrite(BTN, HIGH);
	//PWM_generation();
	//ADC_init();
	uint8_t brt = 0,stage = 0;
	int8_t dir = 1;
	bool btn_status = false, btn_press = false;
 1ac:	f1 2c       	mov	r15, r1
 1ae:	a1 2c       	mov	r10, r1
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	//PWM_generation();
	//ADC_init();
	uint8_t brt = 0,stage = 0;
	int8_t dir = 1;
 1b0:	ee 24       	eor	r14, r14
 1b2:	e3 94       	inc	r14
	pinMode(IMP, OUTPUT);
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	//PWM_generation();
	//ADC_init();
	uint8_t brt = 0,stage = 0;
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
		//_delay_ms(10);
		//}
		//}
		
		
		if (get_button_status() && btn_press == false)	{
 1b8:	d2 df       	rcall	.-92     	; 0x15e <_Z17get_button_statusv>
 1ba:	88 23       	and	r24, r24
 1bc:	21 f0       	breq	.+8      	; 0x1c6 <main+0x50>
 1be:	ff 20       	and	r15, r15
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <main+0x52>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <main+0x52>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	88 23       	and	r24, r24
 1ca:	69 f1       	breq	.+90     	; 0x226 <main+0xb0>
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	24 e3       	ldi	r18, 0x34	; 52
 1d0:	8c e0       	ldi	r24, 0x0C	; 12
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	20 40       	sbci	r18, 0x00	; 0
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x5c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x66>
 1dc:	00 00       	nop
			_delay_ms(500);
			if (!get_button_status()){
 1de:	bf df       	rcall	.-130    	; 0x15e <_Z17get_button_statusv>
 1e0:	81 11       	cpse	r24, r1
 1e2:	21 c0       	rjmp	.+66     	; 0x226 <main+0xb0>
				if(btn_status == false){
 1e4:	a1 10       	cpse	r10, r1
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <main+0x92>
					send_GRB(cur_g,cur_r,cur_b);
 1e8:	4b 2d       	mov	r20, r11
 1ea:	6c 2d       	mov	r22, r12
 1ec:	8d 2d       	mov	r24, r13
 1ee:	a0 df       	rcall	.-192    	; 0x130 <_Z8send_GRBhhh>
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	20 e7       	ldi	r18, 0x70	; 112
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x80>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x8a>
 200:	00 00       	nop
					_delay_ms(100);
					btn_press = true;
 202:	ff 24       	eor	r15, r15
 204:	f3 94       	inc	r15
 206:	0d c0       	rjmp	.+26     	; 0x222 <main+0xac>
					} else {
					send_GRB(0,0,0);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 df       	rcall	.-224    	; 0x130 <_Z8send_GRBhhh>
 210:	9f ef       	ldi	r25, 0xFF	; 255
 212:	20 e7       	ldi	r18, 0x70	; 112
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	91 50       	subi	r25, 0x01	; 1
 218:	20 40       	sbci	r18, 0x00	; 0
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0xa0>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0xaa>
 220:	00 00       	nop
					//EEPROM_write(cur_g, 0);
					//EEPROM_write(cur_r, 1);
					//EEPROM_write(cur_b, 2);
					_delay_ms(100);
				}
				btn_status = !btn_status;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	a8 26       	eor	r10, r24
			}
		}
		if (get_button_status())	{
 226:	9b df       	rcall	.-202    	; 0x15e <_Z17get_button_statusv>
 228:	88 23       	and	r24, r24
 22a:	09 f4       	brne	.+2      	; 0x22e <main+0xb8>
 22c:	6b c0       	rjmp	.+214    	; 0x304 <main+0x18e>
			timebase++;
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
			//digitalWrite(IMP, HIGH);

			brt += dir;
 232:	de 0d       	add	r29, r14
			if (brt >= 255) {
 234:	df 3f       	cpi	r29, 0xFF	; 255
 236:	19 f0       	breq	.+6      	; 0x23e <main+0xc8>
				dir = -1;
			}
			else if (brt == 0) {
 238:	dd 23       	and	r29, r29
 23a:	21 f0       	breq	.+8      	; 0x244 <main+0xce>
 23c:	05 c0       	rjmp	.+10     	; 0x248 <main+0xd2>
			timebase++;
			//digitalWrite(IMP, HIGH);

			brt += dir;
			if (brt >= 255) {
				dir = -1;
 23e:	ee 24       	eor	r14, r14
 240:	ea 94       	dec	r14
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0xd2>
			}
			else if (brt == 0) {
				dir = 1;
 244:	ee 24       	eor	r14, r14
 246:	e3 94       	inc	r14
			}

			// time the animation
			if (timebase > 200) {
 248:	09 3c       	cpi	r16, 0xC9	; 201
 24a:	11 05       	cpc	r17, r1
 24c:	4c f0       	brlt	.+18     	; 0x260 <main+0xea>
				timebase = 0;
				stage += 1;
 24e:	cf 5f       	subi	r28, 0xFF	; 255
				if (stage >= 8) {
 250:	c8 30       	cpi	r28, 0x08	; 8
 252:	18 f4       	brcc	.+6      	; 0x25a <main+0xe4>
				dir = 1;
			}

			// time the animation
			if (timebase > 200) {
				timebase = 0;
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	03 c0       	rjmp	.+6      	; 0x260 <main+0xea>
 25a:	00 e0       	ldi	r16, 0x00	; 0
 25c:	10 e0       	ldi	r17, 0x00	; 0
				stage += 1;
				if (stage >= 8) {
					stage = 0;
 25e:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
			if (stage == 0) {
 260:	c1 11       	cpse	r28, r1
 262:	08 c0       	rjmp	.+16     	; 0x274 <main+0xfe>
				send_GRB(0,brt,0);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	6d 2f       	mov	r22, r29
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	62 df       	rcall	.-316    	; 0x130 <_Z8send_GRBhhh>
				cur_g = 0;
				cur_r = brt;
 26c:	cd 2e       	mov	r12, r29
				cur_b = 0;
 26e:	b1 2c       	mov	r11, r1
					stage = 0;
				}
			}
			if (stage == 0) {
				send_GRB(0,brt,0);
				cur_g = 0;
 270:	d1 2c       	mov	r13, r1
 272:	49 c0       	rjmp	.+146    	; 0x306 <main+0x190>
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 1) {
 274:	c1 30       	cpi	r28, 0x01	; 1
 276:	49 f4       	brne	.+18     	; 0x28a <main+0x114>
				send_GRB(brt / 2,brt,0);
 278:	dd 2e       	mov	r13, r29
 27a:	d6 94       	lsr	r13
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	6d 2f       	mov	r22, r29
 280:	8d 2d       	mov	r24, r13
 282:	56 df       	rcall	.-340    	; 0x130 <_Z8send_GRBhhh>
				cur_g = brt / 2;
				cur_r = brt;
 284:	cd 2e       	mov	r12, r29
				cur_b = 0;
 286:	b1 2c       	mov	r11, r1
 288:	3e c0       	rjmp	.+124    	; 0x306 <main+0x190>
				} else if (stage == 2) {
 28a:	c2 30       	cpi	r28, 0x02	; 2
 28c:	41 f4       	brne	.+16     	; 0x29e <main+0x128>
				send_GRB(brt,brt,0);
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	6d 2f       	mov	r22, r29
 292:	8d 2f       	mov	r24, r29
 294:	4d df       	rcall	.-358    	; 0x130 <_Z8send_GRBhhh>
				cur_g = brt;
				cur_r = brt;
 296:	cd 2e       	mov	r12, r29
				cur_g = brt / 2;
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 2) {
				send_GRB(brt,brt,0);
				cur_g = brt;
 298:	dd 2e       	mov	r13, r29
				cur_r = brt;
				cur_b = 0;
 29a:	b1 2c       	mov	r11, r1
 29c:	34 c0       	rjmp	.+104    	; 0x306 <main+0x190>
				} else if (stage == 3) {
 29e:	c3 30       	cpi	r28, 0x03	; 3
 2a0:	41 f4       	brne	.+16     	; 0x2b2 <main+0x13c>
				send_GRB(brt,0,0);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	8d 2f       	mov	r24, r29
 2a8:	43 df       	rcall	.-378    	; 0x130 <_Z8send_GRBhhh>
				cur_g = brt;
 2aa:	dd 2e       	mov	r13, r29
				cur_r = 0;
				cur_b = 0;
 2ac:	b1 2c       	mov	r11, r1
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 3) {
				send_GRB(brt,0,0);
				cur_g = brt;
				cur_r = 0;
 2ae:	c1 2c       	mov	r12, r1
 2b0:	2a c0       	rjmp	.+84     	; 0x306 <main+0x190>
				cur_b = 0;
				} else if (stage == 4) {
 2b2:	c4 30       	cpi	r28, 0x04	; 4
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <main+0x150>
				send_GRB(brt,0, brt);
 2b6:	4d 2f       	mov	r20, r29
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	8d 2f       	mov	r24, r29
 2bc:	39 df       	rcall	.-398    	; 0x130 <_Z8send_GRBhhh>
				cur_g = brt;
				cur_r = 0;
				cur_b = brt;
 2be:	bd 2e       	mov	r11, r29
				cur_g = brt;
				cur_r = 0;
				cur_b = 0;
				} else if (stage == 4) {
				send_GRB(brt,0, brt);
				cur_g = brt;
 2c0:	dd 2e       	mov	r13, r29
				cur_r = 0;
 2c2:	c1 2c       	mov	r12, r1
 2c4:	20 c0       	rjmp	.+64     	; 0x306 <main+0x190>
				cur_b = brt;
				} else if (stage == 5) {
 2c6:	c5 30       	cpi	r28, 0x05	; 5
 2c8:	41 f4       	brne	.+16     	; 0x2da <main+0x164>
				send_GRB(0, 0, brt);
 2ca:	4d 2f       	mov	r20, r29
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	2f df       	rcall	.-418    	; 0x130 <_Z8send_GRBhhh>
				cur_g = 0;
				cur_r = 0;
				cur_b = brt;
 2d2:	bd 2e       	mov	r11, r29
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 5) {
				send_GRB(0, 0, brt);
				cur_g = 0;
				cur_r = 0;
 2d4:	c1 2c       	mov	r12, r1
				cur_g = brt;
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 5) {
				send_GRB(0, 0, brt);
				cur_g = 0;
 2d6:	d1 2c       	mov	r13, r1
 2d8:	16 c0       	rjmp	.+44     	; 0x306 <main+0x190>
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 6) {
 2da:	c6 30       	cpi	r28, 0x06	; 6
 2dc:	49 f4       	brne	.+18     	; 0x2f0 <main+0x17a>
				send_GRB(0, brt / 2, brt);
 2de:	cd 2e       	mov	r12, r29
 2e0:	c6 94       	lsr	r12
 2e2:	4d 2f       	mov	r20, r29
 2e4:	6c 2d       	mov	r22, r12
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	23 df       	rcall	.-442    	; 0x130 <_Z8send_GRBhhh>
				cur_g = 0;
				cur_r = brt / 2;
				cur_b = brt;
 2ea:	bd 2e       	mov	r11, r29
				cur_g = 0;
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 6) {
				send_GRB(0, brt / 2, brt);
				cur_g = 0;
 2ec:	d1 2c       	mov	r13, r1
 2ee:	0b c0       	rjmp	.+22     	; 0x306 <main+0x190>
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
 2f0:	c7 30       	cpi	r28, 0x07	; 7
 2f2:	49 f4       	brne	.+18     	; 0x306 <main+0x190>
				send_GRB(brt, brt, brt);
 2f4:	4d 2f       	mov	r20, r29
 2f6:	6d 2f       	mov	r22, r29
 2f8:	8d 2f       	mov	r24, r29
 2fa:	1a df       	rcall	.-460    	; 0x130 <_Z8send_GRBhhh>
				cur_g = brt;
				cur_r = brt;
				cur_b = brt;
 2fc:	bd 2e       	mov	r11, r29
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
				send_GRB(brt, brt, brt);
				cur_g = brt;
				cur_r = brt;
 2fe:	cd 2e       	mov	r12, r29
				cur_g = 0;
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
				send_GRB(brt, brt, brt);
				cur_g = brt;
 300:	dd 2e       	mov	r13, r29
 302:	01 c0       	rjmp	.+2      	; 0x306 <main+0x190>
				cur_r = brt;
				cur_b = brt;
			}
		}
		else {
			btn_press = false;
 304:	f1 2c       	mov	r15, r1
 306:	8f e6       	ldi	r24, 0x6F	; 111
 308:	97 e1       	ldi	r25, 0x17	; 23
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x194>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x19a>
 310:	00 00       	nop
 312:	52 cf       	rjmp	.-348    	; 0x1b8 <main+0x42>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
