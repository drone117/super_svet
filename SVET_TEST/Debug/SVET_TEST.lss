
SVET_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000042e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db0  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000652  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f0  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000851  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	14 d1       	rcall	.+552    	; 0x264 <main>
  3c:	bc c1       	rjmp	.+888    	; 0x3b6 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z7pinModehh>:
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	
	/* Return data from data register */
	return EEDR;
}
  40:	98 2f       	mov	r25, r24
  42:	90 7f       	andi	r25, 0xF0	; 240
  44:	8f 70       	andi	r24, 0x0F	; 15
  46:	90 3a       	cpi	r25, 0xA0	; 160
  48:	29 f0       	breq	.+10     	; 0x54 <_Z7pinModehh+0x14>
  4a:	90 3b       	cpi	r25, 0xB0	; 176
  4c:	29 f4       	brne	.+10     	; 0x58 <_Z7pinModehh+0x18>
  4e:	e7 e3       	ldi	r30, 0x37	; 55
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	02 c0       	rjmp	.+4      	; 0x58 <_Z7pinModehh+0x18>
  54:	ea e3       	ldi	r30, 0x3A	; 58
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	90 81       	ld	r25, Z
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	08 2e       	mov	r0, r24
  60:	02 c0       	rjmp	.+4      	; 0x66 <_Z7pinModehh+0x26>
  62:	22 0f       	add	r18, r18
  64:	33 1f       	adc	r19, r19
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <_Z7pinModehh+0x22>
  6a:	20 95       	com	r18
  6c:	29 23       	and	r18, r25
  6e:	62 30       	cpi	r22, 0x02	; 2
  70:	40 f4       	brcc	.+16     	; 0x82 <__DATA_REGION_LENGTH__+0x2>
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <_Z7pinModehh+0x3a>
  76:	66 0f       	add	r22, r22
  78:	77 1f       	adc	r23, r23
  7a:	8a 95       	dec	r24
  7c:	e2 f7       	brpl	.-8      	; 0x76 <_Z7pinModehh+0x36>
  7e:	26 2b       	or	r18, r22
  80:	20 83       	st	Z, r18
  82:	08 95       	ret

00000084 <_Z12digitalWritehh>:
  84:	98 2f       	mov	r25, r24
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	90 3a       	cpi	r25, 0xA0	; 160
  8c:	29 f0       	breq	.+10     	; 0x98 <_Z12digitalWritehh+0x14>
  8e:	90 3b       	cpi	r25, 0xB0	; 176
  90:	29 f4       	brne	.+10     	; 0x9c <_Z12digitalWritehh+0x18>
  92:	e8 e3       	ldi	r30, 0x38	; 56
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <_Z12digitalWritehh+0x18>
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 2e       	mov	r0, r24
  a4:	02 c0       	rjmp	.+4      	; 0xaa <_Z12digitalWritehh+0x26>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <_Z12digitalWritehh+0x22>
  ae:	20 95       	com	r18
  b0:	29 23       	and	r18, r25
  b2:	62 30       	cpi	r22, 0x02	; 2
  b4:	40 f4       	brcc	.+16     	; 0xc6 <_Z12digitalWritehh+0x42>
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <_Z12digitalWritehh+0x3a>
  ba:	66 0f       	add	r22, r22
  bc:	77 1f       	adc	r23, r23
  be:	8a 95       	dec	r24
  c0:	e2 f7       	brpl	.-8      	; 0xba <_Z12digitalWritehh+0x36>
  c2:	26 2b       	or	r18, r22
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <_Z15set_H_and_delayv>:
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z15set_H_and_delayv+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z15set_H_and_delayv+0xe>
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	88 bb       	out	0x18, r24	; 24
  dc:	08 95       	ret

000000de <_Z15set_L_and_delayv>:
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <__stack+0xd>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__stack+0x13>
  f2:	08 95       	ret

000000f4 <_Z14PWM_generationv>:
  f4:	83 e2       	ldi	r24, 0x23	; 35
  f6:	80 bf       	out	0x30, r24	; 48
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	83 bf       	out	0x33, r24	; 51
  fc:	12 be       	out	0x32, r1	; 50
  fe:	8f e7       	ldi	r24, 0x7F	; 127
 100:	8c bf       	out	0x3c, r24	; 60
 102:	08 95       	ret

00000104 <_Z9send_byteh>:

void send_byte(unsigned char b) {
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
	if (b & 0b10000000) {
 108:	88 23       	and	r24, r24
 10a:	14 f4       	brge	.+4      	; 0x110 <_Z9send_byteh+0xc>
		set_H_and_delay();
 10c:	dd df       	rcall	.-70     	; 0xc8 <_Z15set_H_and_delayv>
 10e:	01 c0       	rjmp	.+2      	; 0x112 <_Z9send_byteh+0xe>
	}
	else {
		set_L_and_delay();
 110:	e6 df       	rcall	.-52     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b01000000) {
 112:	c6 ff       	sbrs	r28, 6
 114:	02 c0       	rjmp	.+4      	; 0x11a <_Z9send_byteh+0x16>
		set_H_and_delay();
 116:	d8 df       	rcall	.-80     	; 0xc8 <_Z15set_H_and_delayv>
 118:	01 c0       	rjmp	.+2      	; 0x11c <_Z9send_byteh+0x18>
	}
	else {
		set_L_and_delay();
 11a:	e1 df       	rcall	.-62     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00100000) {
 11c:	c5 ff       	sbrs	r28, 5
 11e:	02 c0       	rjmp	.+4      	; 0x124 <_Z9send_byteh+0x20>
		set_H_and_delay();
 120:	d3 df       	rcall	.-90     	; 0xc8 <_Z15set_H_and_delayv>
 122:	01 c0       	rjmp	.+2      	; 0x126 <_Z9send_byteh+0x22>
	}
	else {
		set_L_and_delay();
 124:	dc df       	rcall	.-72     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00010000) {
 126:	c4 ff       	sbrs	r28, 4
 128:	02 c0       	rjmp	.+4      	; 0x12e <_Z9send_byteh+0x2a>
		set_H_and_delay();
 12a:	ce df       	rcall	.-100    	; 0xc8 <_Z15set_H_and_delayv>
 12c:	01 c0       	rjmp	.+2      	; 0x130 <_Z9send_byteh+0x2c>
	}
	else {
		set_L_and_delay();
 12e:	d7 df       	rcall	.-82     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00001000) {
 130:	c3 ff       	sbrs	r28, 3
 132:	02 c0       	rjmp	.+4      	; 0x138 <_Z9send_byteh+0x34>
		set_H_and_delay();
 134:	c9 df       	rcall	.-110    	; 0xc8 <_Z15set_H_and_delayv>
 136:	01 c0       	rjmp	.+2      	; 0x13a <_Z9send_byteh+0x36>
	}
	else {
		set_L_and_delay();
 138:	d2 df       	rcall	.-92     	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000100) {
 13a:	c2 ff       	sbrs	r28, 2
 13c:	02 c0       	rjmp	.+4      	; 0x142 <_Z9send_byteh+0x3e>
		set_H_and_delay();
 13e:	c4 df       	rcall	.-120    	; 0xc8 <_Z15set_H_and_delayv>
 140:	01 c0       	rjmp	.+2      	; 0x144 <_Z9send_byteh+0x40>
	}
	else {
		set_L_and_delay();
 142:	cd df       	rcall	.-102    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000010) {
 144:	c1 ff       	sbrs	r28, 1
 146:	02 c0       	rjmp	.+4      	; 0x14c <_Z9send_byteh+0x48>
		set_H_and_delay();
 148:	bf df       	rcall	.-130    	; 0xc8 <_Z15set_H_and_delayv>
 14a:	01 c0       	rjmp	.+2      	; 0x14e <_Z9send_byteh+0x4a>
	}
	else {
		set_L_and_delay();
 14c:	c8 df       	rcall	.-112    	; 0xde <_Z15set_L_and_delayv>
	}
	if (b & 0b00000001) {
 14e:	c0 ff       	sbrs	r28, 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <_Z9send_byteh+0x52>
		set_H_and_delay();
 152:	ba df       	rcall	.-140    	; 0xc8 <_Z15set_H_and_delayv>
 154:	01 c0       	rjmp	.+2      	; 0x158 <_Z9send_byteh+0x54>
	}
	else {
		set_L_and_delay();
 156:	c3 df       	rcall	.-122    	; 0xde <_Z15set_L_and_delayv>
	}
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_Z8send_GRBhhh>:

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	08 2f       	mov	r16, r24
 166:	16 2f       	mov	r17, r22
 168:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < 144; i++){
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	c0 39       	cpi	r28, 0x90	; 144
 16e:	40 f4       	brcc	.+16     	; 0x180 <_Z8send_GRBhhh+0x24>
		send_byte (g);
 170:	80 2f       	mov	r24, r16
 172:	c8 df       	rcall	.-112    	; 0x104 <_Z9send_byteh>
		send_byte (r);
 174:	81 2f       	mov	r24, r17
 176:	c6 df       	rcall	.-116    	; 0x104 <_Z9send_byteh>
		send_byte (b);
 178:	8d 2f       	mov	r24, r29
 17a:	c4 df       	rcall	.-120    	; 0x104 <_Z9send_byteh>
		set_L_and_delay();
	}
}

void send_GRB(uint8_t g, uint8_t r, uint8_t b){
	for (uint8_t i = 0; i < 144; i++){
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <_Z8send_GRBhhh+0x10>
		send_byte (g);
		send_byte (r);
		send_byte (b);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <_Z8ADC_initv>:



void ADC_init(){ //ADC on A2
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
	short current_ADC_level = 0;
	uint8_t adc_lvl = 0;
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000001; //CLK/128 (~?kHz)
 196:	81 e8       	ldi	r24, 0x81	; 129
 198:	86 b9       	out	0x06, r24	; 6
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	83 b9       	out	0x03, r24	; 3
	for (uint8_t i = 0; i < 100; i++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
}



void ADC_init(){ //ADC on A2
	short current_ADC_level = 0;
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t adc_lvl = 0;
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
	ADCSRA = 0b10000001; //CLK/128 (~?kHz)
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
	for (uint8_t i = 0; i < 100; i++)
 1a4:	c4 36       	cpi	r28, 0x64	; 100
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <_Z8ADC_initv+0x20>
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <_Z8ADC_initv+0xa8>
	{
		ADCSRA |= (1 << ADSC);
 1aa:	86 b1       	in	r24, 0x06	; 6
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	86 b9       	out	0x06, r24	; 6
		while (ADCSRA & (1 << ADSC) );
 1b0:	36 99       	sbic	0x06, 6	; 6
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <_Z8ADC_initv+0x26>
		adc_lvl = ADCH;
 1b4:	d5 b1       	in	r29, 0x05	; 5
		if (adc_lvl <= 0)
 1b6:	d1 11       	cpse	r29, r1
 1b8:	1b c0       	rjmp	.+54     	; 0x1f0 <_Z8ADC_initv+0x66>
		{
			send_GRB(255,0,0);
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	cd df       	rcall	.-102    	; 0x15c <_Z8send_GRBhhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	80 e7       	ldi	r24, 0x70	; 112
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <_Z8ADC_initv+0x3e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z8ADC_initv+0x48>
 1d2:	00 00       	nop
			_delay_ms(100);
			send_GRB(255,255,0);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	6f ef       	ldi	r22, 0xFF	; 255
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	c0 df       	rcall	.-128    	; 0x15c <_Z8send_GRBhhh>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	80 e7       	ldi	r24, 0x70	; 112
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <_Z8ADC_initv+0x58>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z8ADC_initv+0x62>
 1ec:	00 00       	nop
 1ee:	1a c0       	rjmp	.+52     	; 0x224 <_Z8ADC_initv+0x9a>
			_delay_ms(100);
		}
		else {
			send_GRB(0,255,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6f ef       	ldi	r22, 0xFF	; 255
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	b2 df       	rcall	.-156    	; 0x15c <_Z8send_GRBhhh>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	80 e7       	ldi	r24, 0x70	; 112
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <_Z8ADC_initv+0x74>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_Z8ADC_initv+0x7e>
 208:	00 00       	nop
			_delay_ms(100);
			send_GRB(0,255,255);
 20a:	4f ef       	ldi	r20, 0xFF	; 255
 20c:	6f ef       	ldi	r22, 0xFF	; 255
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	a5 df       	rcall	.-182    	; 0x15c <_Z8send_GRBhhh>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <_Z8ADC_initv+0x8e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <_Z8ADC_initv+0x98>
 222:	00 00       	nop
			_delay_ms(100);
		}
		current_ADC_level += adc_lvl;
 224:	0d 0f       	add	r16, r29
 226:	11 1d       	adc	r17, r1
		ADCSRA |= (0 << ADSC);
 228:	86 b1       	in	r24, 0x06	; 6
 22a:	86 b9       	out	0x06, r24	; 6
		while (ADCSRA & (0 << ADSC) );
 22c:	86 b1       	in	r24, 0x06	; 6
	short current_ADC_level = 0;
	uint8_t adc_lvl = 0;
	ADMUX = 0b00000010; //check the reference voltage or the VCC ???????????????????????????
	ADCSRA = 0b10000001; //CLK/128 (~?kHz)
	ADCSRB = 0b00010000; // left-shift ADCH for 8-bit value
	for (uint8_t i = 0; i < 100; i++)
 22e:	cf 5f       	subi	r28, 0xFF	; 255
 230:	b9 cf       	rjmp	.-142    	; 0x1a4 <_Z8ADC_initv+0x1a>
		}
		current_ADC_level += adc_lvl;
		ADCSRA |= (0 << ADSC);
		while (ADCSRA & (0 << ADSC) );
	}
	current_ADC_level = current_ADC_level / 100;
 232:	c8 01       	movw	r24, r16
 234:	64 e6       	ldi	r22, 0x64	; 100
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	97 d0       	rcall	.+302    	; 0x368 <__divmodhi4>
	//current_ADC_level = current_ADC_level * 99;
	//current_ADC_level = current_ADC_level / 100;
	::base_ADC_level = current_ADC_level;
 23a:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>

}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <_Z17get_button_statusv>:

bool get_button_status(){
	ADCSRA |= (1 << ADSC);
 248:	86 b1       	in	r24, 0x06	; 6
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC) );
 24e:	36 99       	sbic	0x06, 6	; 6
 250:	fe cf       	rjmp	.-4      	; 0x24e <_Z17get_button_statusv+0x6>
	if(ADCH <= ::base_ADC_level){
 252:	95 b1       	in	r25, 0x05	; 5
 254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	89 17       	cp	r24, r25
 25a:	10 f0       	brcs	.+4      	; 0x260 <_Z17get_button_statusv+0x18>
		return true;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	08 95       	ret
	}
	else{
		return false;
 260:	80 e0       	ldi	r24, 0x00	; 0
	}
	ADCSRA |= (0 << ADSC);
	while (ADCSRA & (0 << ADSC) );
}
 262:	08 95       	ret

00000264 <main>:


main()
{
	pinMode(DIN, OUTPUT);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	82 eb       	ldi	r24, 0xB2	; 178
 268:	eb de       	rcall	.-554    	; 0x40 <_Z7pinModehh>
	pinMode(IMP, OUTPUT);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	87 ea       	ldi	r24, 0xA7	; 167
 26e:	e8 de       	rcall	.-560    	; 0x40 <_Z7pinModehh>
	pinMode(BTN, INPUT);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	83 ea       	ldi	r24, 0xA3	; 163
 274:	e5 de       	rcall	.-566    	; 0x40 <_Z7pinModehh>
	digitalWrite(BTN, HIGH);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	83 ea       	ldi	r24, 0xA3	; 163
 27a:	04 df       	rcall	.-504    	; 0x84 <_Z12digitalWritehh>
	ADC_init();
 27c:	86 df       	rcall	.-244    	; 0x18a <_Z8ADC_initv>
	PWM_generation();
 27e:	3a df       	rcall	.-396    	; 0xf4 <_Z14PWM_generationv>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x20>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x26>
 28a:	00 00       	nop
	
	uint8_t cur_g = 0, cur_r = 0, cur_b = 0;
	//uint8_t prev_g = 0, prev_r = 0, prev_b = 0, min_brt = 0;
	int timebase = 0;
	_delay_ms(10);
	send_GRB(255,255,255);
 28c:	4f ef       	ldi	r20, 0xFF	; 255
 28e:	6f ef       	ldi	r22, 0xFF	; 255
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	64 df       	rcall	.-312    	; 0x15c <_Z8send_GRBhhh>
	//uint8_t cur_r = EEPROM_read(1);
	//uint8_t cur_b = EEPROM_read(2);
	
	uint8_t cur_g = 0, cur_r = 0, cur_b = 0;
	//uint8_t prev_g = 0, prev_r = 0, prev_b = 0, min_brt = 0;
	int timebase = 0;
 294:	00 e0       	ldi	r16, 0x00	; 0
 296:	10 e0       	ldi	r17, 0x00	; 0
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();
	uint8_t brt = 0,stage = 0;
	int8_t dir = 1;
 298:	ff 24       	eor	r15, r15
 29a:	f3 94       	inc	r15
	pinMode(IMP, OUTPUT);
	pinMode(BTN, INPUT);
	digitalWrite(BTN, HIGH);
	ADC_init();
	PWM_generation();
	uint8_t brt = 0,stage = 0;
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(100);
		}
		btn_status = !btn_status;
		}
		}*/
		if (get_button_status())	{
 2a0:	d3 df       	rcall	.-90     	; 0x248 <_Z17get_button_statusv>
 2a2:	88 23       	and	r24, r24
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <main+0x44>
 2a6:	59 c0       	rjmp	.+178    	; 0x35a <main+0xf6>
			timebase++;
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
			//digitalWrite(IMP, HIGH);

			brt += dir;
 2ac:	df 0d       	add	r29, r15
			if (brt >= 255) {
 2ae:	df 3f       	cpi	r29, 0xFF	; 255
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <main+0x54>
				dir = -1;
			}
			else if (brt == 0) {
 2b2:	dd 23       	and	r29, r29
 2b4:	21 f0       	breq	.+8      	; 0x2be <main+0x5a>
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <main+0x5e>
			timebase++;
			//digitalWrite(IMP, HIGH);

			brt += dir;
			if (brt >= 255) {
				dir = -1;
 2b8:	ff 24       	eor	r15, r15
 2ba:	fa 94       	dec	r15
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x5e>
			}
			else if (brt == 0) {
				dir = 1;
 2be:	ff 24       	eor	r15, r15
 2c0:	f3 94       	inc	r15
			}

			// time the animation
			if (timebase > 509) {
 2c2:	0e 3f       	cpi	r16, 0xFE	; 254
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	19 07       	cpc	r17, r25
 2c8:	7c f0       	brlt	.+30     	; 0x2e8 <main+0x84>
				timebase = 0;
				stage += 1;
 2ca:	cf 5f       	subi	r28, 0xFF	; 255
				brt = 0;
				dir = 1;
				if (stage >= 8) {
 2cc:	c8 30       	cpi	r28, 0x08	; 8
 2ce:	30 f4       	brcc	.+12     	; 0x2dc <main+0x78>
				dir = 1;
			}

			// time the animation
			if (timebase > 509) {
				timebase = 0;
 2d0:	00 e0       	ldi	r16, 0x00	; 0
 2d2:	10 e0       	ldi	r17, 0x00	; 0
				stage += 1;
				brt = 0;
				dir = 1;
 2d4:	ff 24       	eor	r15, r15
 2d6:	f3 94       	inc	r15

			// time the animation
			if (timebase > 509) {
				timebase = 0;
				stage += 1;
				brt = 0;
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <main+0x84>
				dir = 1;
			}

			// time the animation
			if (timebase > 509) {
				timebase = 0;
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	10 e0       	ldi	r17, 0x00	; 0
				stage += 1;
				brt = 0;
				dir = 1;
 2e0:	ff 24       	eor	r15, r15
 2e2:	f3 94       	inc	r15
				if (stage >= 8) {
					stage = 0;
 2e4:	c0 e0       	ldi	r28, 0x00	; 0

			// time the animation
			if (timebase > 509) {
				timebase = 0;
				stage += 1;
				brt = 0;
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
				dir = 1;
				if (stage >= 8) {
					stage = 0;
				}
			}
			if (stage == 0) {
 2e8:	c1 11       	cpse	r28, r1
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <main+0x92>
				send_GRB(0,brt,0);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	6d 2f       	mov	r22, r29
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	34 df       	rcall	.-408    	; 0x15c <_Z8send_GRBhhh>
 2f4:	32 c0       	rjmp	.+100    	; 0x35a <main+0xf6>
				cur_g = 0;
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 1) {
 2f6:	c1 30       	cpi	r28, 0x01	; 1
 2f8:	31 f4       	brne	.+12     	; 0x306 <main+0xa2>
				send_GRB(brt / 2,brt,0);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	6d 2f       	mov	r22, r29
 2fe:	8d 2f       	mov	r24, r29
 300:	86 95       	lsr	r24
 302:	2c df       	rcall	.-424    	; 0x15c <_Z8send_GRBhhh>
 304:	2a c0       	rjmp	.+84     	; 0x35a <main+0xf6>
				cur_g = brt / 2;
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 2) {
 306:	c2 30       	cpi	r28, 0x02	; 2
 308:	29 f4       	brne	.+10     	; 0x314 <main+0xb0>
				send_GRB(brt,brt,0);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	6d 2f       	mov	r22, r29
 30e:	8d 2f       	mov	r24, r29
 310:	25 df       	rcall	.-438    	; 0x15c <_Z8send_GRBhhh>
 312:	23 c0       	rjmp	.+70     	; 0x35a <main+0xf6>
				cur_g = brt;
				cur_r = brt;
				cur_b = 0;
				} else if (stage == 3) {
 314:	c3 30       	cpi	r28, 0x03	; 3
 316:	29 f4       	brne	.+10     	; 0x322 <main+0xbe>
				send_GRB(brt,0,0);
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	8d 2f       	mov	r24, r29
 31e:	1e df       	rcall	.-452    	; 0x15c <_Z8send_GRBhhh>
 320:	1c c0       	rjmp	.+56     	; 0x35a <main+0xf6>
				cur_g = brt;
				cur_r = 0;
				cur_b = 0;
				} else if (stage == 4) {
 322:	c4 30       	cpi	r28, 0x04	; 4
 324:	29 f4       	brne	.+10     	; 0x330 <main+0xcc>
				send_GRB(brt,0, brt);
 326:	4d 2f       	mov	r20, r29
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8d 2f       	mov	r24, r29
 32c:	17 df       	rcall	.-466    	; 0x15c <_Z8send_GRBhhh>
 32e:	15 c0       	rjmp	.+42     	; 0x35a <main+0xf6>
				cur_g = brt;
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 5) {
 330:	c5 30       	cpi	r28, 0x05	; 5
 332:	29 f4       	brne	.+10     	; 0x33e <main+0xda>
				send_GRB(0, 0, brt);
 334:	4d 2f       	mov	r20, r29
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	10 df       	rcall	.-480    	; 0x15c <_Z8send_GRBhhh>
 33c:	0e c0       	rjmp	.+28     	; 0x35a <main+0xf6>
				cur_g = 0;
				cur_r = 0;
				cur_b = brt;
				} else if (stage == 6) {
 33e:	c6 30       	cpi	r28, 0x06	; 6
 340:	31 f4       	brne	.+12     	; 0x34e <main+0xea>
				send_GRB(0, brt / 2, brt);
 342:	4d 2f       	mov	r20, r29
 344:	6d 2f       	mov	r22, r29
 346:	66 95       	lsr	r22
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 df       	rcall	.-496    	; 0x15c <_Z8send_GRBhhh>
 34c:	06 c0       	rjmp	.+12     	; 0x35a <main+0xf6>
				cur_g = 0;
				cur_r = brt / 2;
				cur_b = brt;
				} else if (stage == 7) {
 34e:	c7 30       	cpi	r28, 0x07	; 7
 350:	21 f4       	brne	.+8      	; 0x35a <main+0xf6>
				send_GRB(brt, brt, brt);
 352:	4d 2f       	mov	r20, r29
 354:	6d 2f       	mov	r22, r29
 356:	8d 2f       	mov	r24, r29
 358:	01 df       	rcall	.-510    	; 0x15c <_Z8send_GRBhhh>
 35a:	8f e9       	ldi	r24, 0x9F	; 159
 35c:	9f e0       	ldi	r25, 0x0F	; 15
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0xfa>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x100>
 364:	00 00       	nop
 366:	9c cf       	rjmp	.-200    	; 0x2a0 <main+0x3c>

00000368 <__divmodhi4>:
 368:	97 fb       	bst	r25, 7
 36a:	07 2e       	mov	r0, r23
 36c:	16 f4       	brtc	.+4      	; 0x372 <__divmodhi4+0xa>
 36e:	00 94       	com	r0
 370:	06 d0       	rcall	.+12     	; 0x37e <__divmodhi4_neg1>
 372:	77 fd       	sbrc	r23, 7
 374:	08 d0       	rcall	.+16     	; 0x386 <__divmodhi4_neg2>
 376:	0b d0       	rcall	.+22     	; 0x38e <__udivmodhi4>
 378:	07 fc       	sbrc	r0, 7
 37a:	05 d0       	rcall	.+10     	; 0x386 <__divmodhi4_neg2>
 37c:	3e f4       	brtc	.+14     	; 0x38c <__divmodhi4_exit>

0000037e <__divmodhi4_neg1>:
 37e:	90 95       	com	r25
 380:	81 95       	neg	r24
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	08 95       	ret

00000386 <__divmodhi4_neg2>:
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255

0000038c <__divmodhi4_exit>:
 38c:	08 95       	ret

0000038e <__udivmodhi4>:
 38e:	aa 1b       	sub	r26, r26
 390:	bb 1b       	sub	r27, r27
 392:	51 e1       	ldi	r21, 0x11	; 17
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__udivmodhi4_ep>

00000396 <__udivmodhi4_loop>:
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	a6 17       	cp	r26, r22
 39c:	b7 07       	cpc	r27, r23
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__udivmodhi4_ep>
 3a0:	a6 1b       	sub	r26, r22
 3a2:	b7 0b       	sbc	r27, r23

000003a4 <__udivmodhi4_ep>:
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	5a 95       	dec	r21
 3aa:	a9 f7       	brne	.-22     	; 0x396 <__udivmodhi4_loop>
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	bc 01       	movw	r22, r24
 3b2:	cd 01       	movw	r24, r26
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
